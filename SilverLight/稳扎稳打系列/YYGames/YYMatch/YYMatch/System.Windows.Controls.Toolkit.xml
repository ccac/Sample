<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Windows.Controls.Toolkit</name>
    </assembly>
    <members>
        <member name="T:System.Windows.Controls.DesignerProperties">
            <summary>
            Provides a custom implementation of DesignerProperties.GetIsInDesignMode
            to work around an issue.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DesignerProperties.GetIsInDesignMode(System.Windows.DependencyObject)">
            <summary>
            Returns whether the control is in design mode (running under Blend
            or Visual Studio).
            </summary>
            <param name="element">The element from which the property value is
            read.</param>
            <returns>True if in design mode.</returns>
        </member>
        <member name="F:System.Windows.Controls.DesignerProperties._isInDesignMode">
            <summary>
            Stores the computed InDesignMode value.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.BindingEvaluator`1">
            <summary>
            A framework element that permits a binding to be evaluated in a new data
            context leaf node.
            </summary>
            <typeparam name="T">The type of dynamic binding to return.</typeparam>
        </member>
        <member name="F:System.Windows.Controls.BindingEvaluator`1._binding">
            <summary>
            Gets or sets the string value binding used by the control.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.BindingEvaluator`1.ValueProperty">
            <summary>
            Identifies the Value dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.BindingEvaluator`1.#ctor">
            <summary>
            Initializes a new instance of the BindingEvaluator class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.BindingEvaluator`1.#ctor(System.Windows.Data.Binding)">
            <summary>
            Initializes a new instance of the BindingEvaluator class,
            setting the initial binding to the provided parameter.
            </summary>
            <param name="binding">The initial string value binding.</param>
        </member>
        <member name="M:System.Windows.Controls.BindingEvaluator`1.ClearDataContext">
            <summary>
            Clears the data context so that the control does not keep a
            reference to the last-looked up item.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.BindingEvaluator`1.GetDynamicValue(System.Object,System.Boolean)">
            <summary>
            Updates the data context of the framework element and returns the 
            updated binding value.
            </summary>
            <param name="o">The object to use as the data context.</param>
            <param name="clearDataContext">If set to true, this parameter will
            clear the data context immediately after retrieving the value.</param>
            <returns>Returns the evaluated T value of the bound dependency
            property.</returns>
        </member>
        <member name="M:System.Windows.Controls.BindingEvaluator`1.GetDynamicValue(System.Object)">
            <summary>
            Updates the data context of the framework element and returns the 
            updated binding value.
            </summary>
            <param name="o">The object to use as the data context.</param>
            <returns>Returns the evaluated T value of the bound dependency
            property.</returns>
        </member>
        <member name="P:System.Windows.Controls.BindingEvaluator`1.Value">
            <summary>
            Gets or sets the data item string value.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.BindingEvaluator`1.ValueBinding">
            <summary>
            Gets or sets the value binding.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.InteractionHelper">
            <summary>
            The InteractionHelper provides controls with support for all of the
            common interactions like mouse movement, mouse clicks, key presses,
            etc., and also incorporates proper event semantics when the control is
            disabled.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.InteractionHelper.SequentialClickThresholdInMilliseconds">
            <summary>
            The threshold used to determine whether two clicks are temporally
            local and considered a double click (or triple, quadruple, etc.).
            500 milliseconds is the default double click value on Windows.
            This value would ideally be pulled form the system settings.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.InteractionHelper.SequentialClickThresholdInPixelsSquared">
            <summary>
            The threshold used to determine whether two clicks are spatially
            local and considered a double click (or triple, quadruple, etc.)
            in pixels squared.  We use pixels squared so that we can compare to
            the distance delta without taking a square root.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.InteractionHelper._updateVisualState">
            <summary>
            Reference used to call UpdateVisualState on the base class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.#ctor(System.Windows.Controls.Control)">
            <summary>
            Initializes a new instance of the InteractionHelper class.
            </summary>
            <param name="control">Control receiving interaction.</param>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
            <remarks>
            UpdateVisualState works differently than the rest of the injected
            functionality.  Most of the other events are overridden by the
            calling class which calls Allow, does what it wants, and then calls
            Base.  UpdateVisualState is the opposite because a number of the
            methods in InteractionHelper need to trigger it in the calling
            class.  We do this using the IUpdateVisualState internal interface.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.UpdateVisualStateBase(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle the control's Loaded event.
            </summary>
            <param name="sender">The control.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnIsEnabledChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handle changes to the control's IsEnabled property.
            </summary>
            <param name="sender">The control.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnApplyTemplateBase">
            <summary>
            Update the visual state of the control when its template is changed.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Check if the control's GotFocus event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnGotFocusBase">
            <summary>
            Base implementation of the virtual GotFocus event handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowLostFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Check if the control's LostFocus event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnLostFocusBase">
            <summary>
            Base implementation of the virtual LostFocus event handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Check if the control's MouseEnter event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnMouseEnterBase">
            <summary>
            Base implementation of the virtual MouseEnter event handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Check if the control's MouseLeave event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnMouseLeaveBase">
            <summary>
            Base implementation of the virtual MouseLeave event handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Check if the control's MouseLeftButtonDown event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnMouseLeftButtonDownBase">
            <summary>
            Base implementation of the virtual MouseLeftButtonDown event
            handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Check if the control's MouseLeftButtonUp event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.OnMouseLeftButtonUpBase">
            <summary>
            Base implementation of the virtual MouseLeftButtonUp event handler.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Check if the control's KeyDown event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.InteractionHelper.AllowKeyUp(System.Windows.Input.KeyEventArgs)">
            <summary>
            Check if the control's KeyUp event should be handled.
            </summary>
            <param name="e">Event arguments.</param>
            <returns>
            A value indicating whether the event should be handled.
            </returns>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.Control">
            <summary>
            Gets the control the InteractionHelper is targeting.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.IsFocused">
            <summary>
            Gets a value indicating whether the control has focus.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.IsMouseOver">
            <summary>
            Gets a value indicating whether the mouse is over the control.
            </summary> 
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.IsPressed">
            <summary>
            Gets a value indicating whether the mouse button is pressed down
            over the control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.LastClickTime">
            <summary>
            Gets or sets the last time the control was clicked.
            </summary>
            <remarks>
            The value is stored as Utc time because it is slightly more
            performant than converting to local time.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.LastClickPosition">
            <summary>
            Gets or sets the mouse position of the last click.
            </summary>
            <remarks>The value is relative to the control.</remarks>
        </member>
        <member name="P:System.Windows.Controls.InteractionHelper.ClickCount">
            <summary>
            Gets the number of times the control was clicked.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.ItemContainerGenerator">
            <summary>
            Provides mappings between the items of an ItemsControl and their 
            container elements.
            </summary>
            <remarks>
            <para>
            The ItemContainerGenerator class maintains associations between 
            selected items controls and their item containers, such as 
            TreeView and TreeViewItem. If a control has an associated 
            ItemContainerGenerator, you will be able to retrieve it through 
            a property on the control. For example, the TreeView control has 
            an TreeView.ItemContainerGenerator property.
            </para>
            <para>
            You can use the ItemContainerGenerator to retrieve items based on 
            their index or containers by specifying the data item. 
            For example, if you have a data-bound TreeView, and you want 
            to get a TreeViewItem based on its index, you can use the 
            ContainerFromIndex method. If you want to retrieve the data 
            item, use ItemFromContainer method. 
            </para>
            </remarks>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.ItemContainerGenerator._itemsHost">
            <summary>
            A Panel that is used as the ItemsHost of the ItemsControl.  This
            property will only be valid when the ItemsControl is live in the
            tree and has generated containers for some of its items.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ItemContainerGenerator._scrollHost">
            <summary>
            A ScrollViewer that is used to scroll the items in the ItemsHost.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ItemContainerGenerator.#ctor(System.Windows.Controls.ItemsControl)">
            <summary>
            Initializes a new instance of the ItemContainerGenerator.
            </summary>
            <param name="control">
            The ItemsControl being tracked by the ItemContainerGenerator.
            </param>
        </member>
        <member name="M:System.Windows.Controls.ItemContainerGenerator.OnApplyTemplate">
            <summary>
            Apply a control template to the ItemsControl.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ItemContainerGenerator.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object,System.Windows.Style)">
            <summary>
            Prepares the specified container to display the specified item.
            </summary>
            <param name="element">
            Container element used to display the specified item.
            </param>
            <param name="item">Specified item to display.</param>
            <param name="parentItemContainerStyle">
            The ItemContainerStyle for the parent ItemsControl.
            </param>
        </member>
        <member name="M:System.Windows.Controls.ItemContainerGenerator.HasDefaultValue(System.Windows.Controls.Control,System.Windows.DependencyProperty)">
            <summary>
            Check whether a control has the default value for a property.
            </summary>
            <param name="control">The control to check.</param>
            <param name="property">The property to check.</param>
            <returns>
            True if the property has the default value; false otherwise.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.ItemContainerGenerator.PrepareHeaderedItemsControlContainer(System.Windows.Controls.HeaderedItemsControl,System.Object,System.Windows.Controls.ItemsControl,System.Windows.Style)">
            <summary>
            Prepare a PrepareHeaderedItemsControlContainer container for an
            item.
            </summary>
            <param name="control">Container to prepare.</param>
            <param name="item">Item to be placed in the container.</param>
            <param name="parentItemsControl">The parent ItemsControl.</param>
            <param name="parentItemContainerStyle">
            The ItemContainerStyle for the parent ItemsControl.
            </param>
        </member>
        <member name="M:System.Windows.Controls.ItemContainerGenerator.ClearContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            Undoes the effects of PrepareContainerForItemOverride.
            </summary>
            <param name="element">The container element.</param>
            <param name="item">The contained item.</param>
        </member>
        <member name="M:System.Windows.Controls.ItemContainerGenerator.UpdateItemContainerStyle(System.Windows.Style)">
            <summary>
            Update the style of any generated items when the ItemContainerStyle
            has been changed.
            </summary>
            <param name="itemContainerStyle">The ItemContainerStyle.</param>
            <remarks>
            Silverlight does not support setting a Style multiple times, so we
            only attempt to set styles on elements whose style hasn't already
            been set.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.ItemContainerGenerator.ContainerFromIndex(System.Int32)">
            <summary>
            Returns the container for the item at the specified 
            index within the ItemCollection.
            </summary>
            <param name="index">The index of the item to retrieve.</param>
            <returns>
            The container for the item at the specified index within the item 
            collection, if the item has a container; otherwise, a null reference. 
            </returns>
            <remarks>
            If there is no item at the specified index or the item has no 
            container, the ContainerFromIndex method returns a null reference. 
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.ItemContainerGenerator.ContainerFromItem(System.Object)">
            <summary>
            Returns the container corresponding to the specified item.
            </summary>
            <param name="item">The item to find the container for.</param>
            <returns>
            A container that corresponds to the specified item, if the item has 
            a container and exists in the collection; otherwise, a null 
            reference. 
            </returns>
            <remarks>
            If the specified item does not belong to the item collection, or 
            there is no container for it, the ContainerFromItem method returns 
            a null reference. 
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.ItemContainerGenerator.IndexFromContainer(System.Windows.DependencyObject)">
            <summary>
            Returns the index to the item that has the specified, 
            generated container.
            </summary>
            <param name="container">
            The generated container to retrieve the item index for.
            </param>
            <returns>
            The index to the item that corresponds to the specified 
            generated container.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.ItemContainerGenerator.ItemFromContainer(System.Windows.DependencyObject)">
            <summary>
            Returns the item that corresponds to the specified, 
            generated container.
            </summary>
            <param name="container">
            The DependencyObject that corresponds to the item to be returned.
            </param>
            <returns>
            The contained item, or the container if it had no associated item.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.ItemContainerGenerator.ScrollIntoView(System.Windows.FrameworkElement)">
            <summary>
            Scroll the desired element into the ScrollHost's viewport.
            </summary>
            <param name="element">Element to scroll into view.</param>
        </member>
        <member name="P:System.Windows.Controls.ItemContainerGenerator.ItemsControl">
            <summary>
            Gets or sets the ItemsControl being tracked by the
            ItemContainerGenerator.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ItemContainerGenerator.ContainersToItems">
            <summary>
            Gets or sets a dictionary that maps containers to the items they
            display.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ItemContainerGenerator.ItemsHost">
            <summary>
            Gets a Panel that is used as the ItemsHost of the ItemsControl.
            This property will only be valid when the ItemsControl is live in
            the tree and has generated containers for some of its items.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.ItemContainerGenerator.ScrollHost">
            <summary>
            Gets a ScrollViewer that is used to scroll the items in the
            ItemsHost.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.IUpdateVisualState">
            <summary>
            The IUpdateVisualState interface is used to provide the
            InteractionHelper with access to the type's UpdateVisualState method.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.IUpdateVisualState.UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="T:System.Windows.LengthConverter">
            <summary>
            Converts instances of other types to and from instances of a Double that
            represent an object's length.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="F:System.Windows.LengthConverter.UnitToPixelConversions">
            <summary>
            Conversions from units to pixels.
            </summary>
        </member>
        <member name="M:System.Windows.LengthConverter.#ctor">
            <summary>
            Initializes a new instance of the LengthConverter class.
            </summary>
        </member>
        <member name="M:System.Windows.LengthConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether conversion is possible from a specified type to a
            Double that represents an object's length.
            </summary>
            <param name="typeDescriptorContext">
            The type descriptor context.
            </param>
            <param name="sourceType">
            Identifies the data type to evaluate for conversion.
            </param>
            <returns>true if conversion is possible; otherwise, false.</returns>
        </member>
        <member name="M:System.Windows.LengthConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts instances of other data types into instances of Double that
            represent an object's length.
            </summary>
            <param name="typeDescriptorContext">
            The type descriptor context.
            </param>
            <param name="cultureInfo">The culture used to convert.</param>
            <param name="source">
            The value that is being converted to Double representing the
            object's length.
            </param>
            <returns>
            An instance of Double that is the value of the conversion.
            </returns>
        </member>
        <member name="M:System.Windows.LengthConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Determines whether conversion is possible to a specified type from a
            Double that represents an object's length.
            </summary>
            <param name="typeDescriptorContext">
            The type descriptor context.
            </param>
            <param name="destinationType">
            Identifies the data type to evaluate for conversion.
            </param>
            <returns>
            A value indicating whether the conversion is possible.
            </returns>
        </member>
        <member name="M:System.Windows.LengthConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts other types into instances of Double that represent an
            object's length.
            </summary>
            <param name="typeDescriptorContext">
            The type descriptor context.
            </param>
            <param name="cultureInfo">The culture used to convert.</param>
            <param name="value">
            The value that is being converted to a specified type.
            </param>
            <param name="destinationType">
            The type to convert the value to.
            </param>
            <returns>
            The value of the conversion to the specified type.
            </returns>
        </member>
        <member name="T:System.Windows.Controls.NumericExtensions">
            <summary>
            Numeric utility methods used by controls.  These methods are similar in
            scope to the WPF DoubleUtil class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.NumericExtensions.IsZero(System.Double)">
            <summary>
            Check if a number is zero.
            </summary>
            <param name="value">The number to check.</param>
            <returns>True if the number is zero, false otherwise.</returns>
        </member>
        <member name="M:System.Windows.Controls.NumericExtensions.IsNaN(System.Double)">
            <summary>
            Check if a number isn't really a number.
            </summary>
            <param name="value">The number to check.</param>
            <returns>
            True if the number is not a number, false if it is a number.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.NumericExtensions.IsGreaterThan(System.Double,System.Double)">
            <summary>
            Determine if one number is greater than another.
            </summary>
            <param name="left">First number.</param>
            <param name="right">Second number.</param>
            <returns>
            True if the first number is greater than the second, false
            otherwise.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.NumericExtensions.IsLessThanOrClose(System.Double,System.Double)">
            <summary>
            Determine if one number is less than or close to another.
            </summary>
            <param name="left">First number.</param>
            <param name="right">Second number.</param>
            <returns>
            True if the first number is less than or close to the second, false
            otherwise.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.NumericExtensions.AreClose(System.Double,System.Double)">
            <summary>
            Determine if two numbers are close in value.
            </summary>
            <param name="left">First number.</param>
            <param name="right">Second number.</param>
            <returns>
            True if the first number is close in value to the second, false
            otherwise.
            </returns>
        </member>
        <member name="T:System.Windows.Controls.NumericExtensions.NanUnion">
            <summary>
            NanUnion is a C++ style type union used for efficiently converting
            a double into an unsigned long, whose bits can be easily
            manipulated.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.NumericExtensions.NanUnion.FloatingValue">
            <summary>
            Floating point representation of the union.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.NumericExtensions.NanUnion.IntegerValue">
            <summary>
            Integer representation of the union.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.RoutedPropertyChangingEventArgs`1">
            <summary>
            Provides event data for various routed events that track property values 
            changing. Typically the events denote a cancellable action.
            </summary>
            <typeparam name="T">Type of the dependency property to be changed.</typeparam>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.RoutedPropertyChangingEventArgs`1._cancel">
            <summary>
            Private member variable for Cancel property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.RoutedPropertyChangingEventArgs`1.#ctor(System.Windows.DependencyProperty,`0,`0,System.Boolean)">
            <summary>
            Initializes a new instance of the RoutedPropertyChangingEventArgs.
            </summary>
            <param name="property">The dependency property whose value is changing.</param>
            <param name="oldValue">Old value of the property.</param>
            <param name="newValue">New value of the property.</param>
            <param name="isCancelable">A valid indicating whether the event is cancelable.</param>
        </member>
        <member name="P:System.Windows.Controls.RoutedPropertyChangingEventArgs`1.Property">
            <summary>
            Gets the DependencyProperty identifier for the property that is 
            changing.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.RoutedPropertyChangingEventArgs`1.OldValue">
            <summary>
            Gets a value that reports the previous value of the  changing 
            property.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.RoutedPropertyChangingEventArgs`1.NewValue">
            <summary>
            Gets or sets a value that reports the new value of the changing 
            property,  assuming that the property change is not cancelled.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.RoutedPropertyChangingEventArgs`1.IsCancelable">
            <summary>
            Gets a value indicating whether the property change that originated 
            the RoutedPropertyChanging event is cancellable.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.RoutedPropertyChangingEventArgs`1.Cancel">
            <summary>
            Gets or sets a value indicating whether the property change 
            that originated the RoutedPropertyChanging event should be cancelled.
            </summary>
            <remarks>
            Always check IsCancelable first in your event handling before 
            attempting to set Cancel to true.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.RoutedPropertyChangingEventArgs`1.InCoercion">
            <summary>
            Gets or sets a value indicating whether internal value coercion is 
            acting on the property change that originated the 
            RoutedPropertyChanging event.
            </summary>
            <remarks>
            Coercion of values is not inherent in the property system in 
            Silverlight. Implementations might use this value as a sentinel to 
            denote that processing in the handler has entered a custom 
            routine that coerces the value based on the reported old and new 
            values. The coercion routine would not attempt to raise the 
            event again in this case.
            </remarks>
        </member>
        <member name="T:System.Windows.Controls.RoutedPropertyChangingEventHandler`1">
            <summary>
            Represents methods that handle various routed events that track property 
            values changing. Typically the events denote a cancellable action.
            </summary>
            <typeparam name="T">
            The type of the dependency property that is changing.
            </typeparam>
            <param name="sender">
            The object where the event handler is attached.
            </param>
            <param name="e">The event arguments.</param>
            <remarks>
            <para>
            Examples of events that use type-constrained delegates based on 
            RoutedPropertyChangingEventHandler(T) include DropDownClosing and 
            DropDownClosing.
            </para>
            <para>
            The difference between RoutedPropertyChanged events and 
            RoutedPropertyChanging events is that RoutedPropertyChanging events 
            typically give the application an opportunity to cancel the property 
            change, by setting Cancel to true in the event data.
            </para>
            </remarks>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.ScrollExtensions">
            <summary>
            The ScrollExtensions class provides utility methods for scrolling items
            ScrollViewers.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ScrollExtensions.LineChange">
            <summary>
            The amount to scroll a ScrollViewer for a line change.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ScrollExtensions.ScrollByVerticalOffset(System.Windows.Controls.ScrollViewer,System.Double)">
            <summary>
            Scroll a ScrollViewer vertically by a given offset.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
            <param name="offset">The vertical offset to scroll.</param>
        </member>
        <member name="M:System.Windows.Controls.ScrollExtensions.ScrollByHorizontalOffset(System.Windows.Controls.ScrollViewer,System.Double)">
            <summary>
            Scroll a ScrollViewer horizontally by a given offset.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
            <param name="offset">The horizontal offset to scroll.</param>
        </member>
        <member name="M:System.Windows.Controls.ScrollExtensions.LineUp(System.Windows.Controls.ScrollViewer)">
            <summary>
            Scroll the ScrollViewer up by a line.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
        </member>
        <member name="M:System.Windows.Controls.ScrollExtensions.LineDown(System.Windows.Controls.ScrollViewer)">
            <summary>
            Scroll the ScrollViewer down by a line.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
        </member>
        <member name="M:System.Windows.Controls.ScrollExtensions.LineLeft(System.Windows.Controls.ScrollViewer)">
            <summary>
            Scroll the ScrollViewer left by a line.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
        </member>
        <member name="M:System.Windows.Controls.ScrollExtensions.LineRight(System.Windows.Controls.ScrollViewer)">
            <summary>
            Scroll the ScrollViewer right by a line.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
        </member>
        <member name="M:System.Windows.Controls.ScrollExtensions.PageUp(System.Windows.Controls.ScrollViewer)">
            <summary>
            Scroll the ScrollViewer up by a page.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
        </member>
        <member name="M:System.Windows.Controls.ScrollExtensions.PageDown(System.Windows.Controls.ScrollViewer)">
            <summary>
            Scroll the ScrollViewer down by a page.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
        </member>
        <member name="M:System.Windows.Controls.ScrollExtensions.PageLeft(System.Windows.Controls.ScrollViewer)">
            <summary>
            Scroll the ScrollViewer left by a page.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
        </member>
        <member name="M:System.Windows.Controls.ScrollExtensions.PageRight(System.Windows.Controls.ScrollViewer)">
            <summary>
            Scroll the ScrollViewer right by a page.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
        </member>
        <member name="M:System.Windows.Controls.ScrollExtensions.ScrollToTop(System.Windows.Controls.ScrollViewer)">
            <summary>
            Scroll the ScrollViewer to the top.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
        </member>
        <member name="M:System.Windows.Controls.ScrollExtensions.ScrollToBottom(System.Windows.Controls.ScrollViewer)">
            <summary>
            Scroll the ScrollViewer to the bottom.
            </summary>
            <param name="viewer">The ScrollViewer.</param>
        </member>
        <member name="M:System.Windows.Controls.ScrollExtensions.GetTopAndBottom(System.Windows.FrameworkElement,System.Windows.FrameworkElement,System.Double@,System.Double@)">
            <summary>
            Get the top and bottom of an element with respect to its parent.
            </summary>
            <param name="element">The element to get the position of.</param>
            <param name="parent">The parent of the element.</param>
            <param name="top">Vertical offset to the top of the element.</param>
            <param name="bottom">
            Vertical offset to the bottom of the element.
            </param>
        </member>
        <member name="T:System.Windows.Controls.TypeConverters">
            <summary>
            Common TypeConverter functionality.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TypeConverters.CanConvertFrom``1(System.Type)">
            <summary>
            Returns a value indicating whether this converter can convert an
            object of the given type to an instance of the expected type.
            </summary>
            <typeparam name="T">Expected type of the converter.</typeparam>
            <param name="sourceType">
            The type of the source that is being evaluated for conversion.
            </param>
            <returns>
            A value indicating whether the converter can convert the provided
            type.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TypeConverters.ConvertFrom``1(System.ComponentModel.TypeConverter,System.Object)">
            <summary>
            Attempts to convert a specified object to an instance of the
            expected type.
            </summary>
            <typeparam name="T">Expected type of the converter.</typeparam>
            <param name="converter">TypeConverter instance.</param>
            <param name="value">The object being converted.</param>
            <returns>
            The instance of the expected type created from the converted object.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TypeConverters.CanConvertTo``1(System.Type)">
            <summary>
            Determines whether conversion is possible to a specified type.
            </summary>
            <typeparam name="T">Expected type of the converter.</typeparam>
            <param name="destinationType">
            Identifies the data type to evaluate for conversion.
            </param>
            <returns>
            A value indicating whether conversion is possible.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TypeConverters.ConvertTo(System.ComponentModel.TypeConverter,System.Object,System.Type)">
            <summary>
            Attempts to convert a specified object to an instance of the
            desired type.
            </summary>
            <param name="converter">TypeConverter instance.</param>
            <param name="value">The object being converted.</param>
            <param name="destinationType">
            The type to convert the value to.
            </param>
            <returns>
            The value of the conversion to the specified type.
            </returns>
        </member>
        <member name="T:System.Windows.Controls.VisualStates">
            <summary>
            Names and helpers for visual states in the controls.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupCommon">
            <summary>
            Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateNormal">
            <summary>
            Normal state of the Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateMouseOver">
            <summary>
            MouseOver state of the Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StatePressed">
            <summary>
            Pressed state of the Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateDisabled">
            <summary>
            Disabled state of the Common state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupFocus">
            <summary>
            Focus state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateUnfocused">
            <summary>
            Unfocused state of the Focus state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateFocused">
            <summary>
            Focused state of the Focus state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupSelection">
            <summary>
            Selection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateSelected">
            <summary>
            Selected state of the Selection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateUnselected">
            <summary>
            Unselected state of the Selection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateSelectedInactive">
            <summary>
            Selected inactive state of the Selection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupExpansion">
            <summary>
            Expansion state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateExpanded">
            <summary>
            Expanded state of the Expansion state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateCollapsed">
            <summary>
            Collapsed state of the Expansion state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupPopup">
            <summary>
            Popup state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StatePopupOpened">
            <summary>
            Opened state of the Popup state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StatePopupClosed">
            <summary>
            Closed state of the Popup state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupExpandDirection">
            <summary>
            ExpandDirection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateExpandDown">
            <summary>
            Down expand direction state of ExpandDirection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateExpandUp">
            <summary>
            Up expand direction state of ExpandDirection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateExpandLeft">
            <summary>
            Left expand direction state of ExpandDirection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateExpandRight">
            <summary>
            Right expand direction state of ExpandDirection state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupHasItems">
            <summary>
            HasItems state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateHasItems">
            <summary>
            HasItems state of the HasItems state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateNoItems">
            <summary>
            NoItems state of the HasItems state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupIncrease">
            <summary>
            Increment state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateIncreaseEnabled">
            <summary>
            State enabled for increment group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateIncreaseDisabled">
            <summary>
            State disabled for increment group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupDecrease">
            <summary>
            Decrement state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateDecreaseEnabled">
            <summary>
            State enabled for decrement group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateDecreaseDisabled">
            <summary>
            State disabled for decrement group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupInteractionMode">
            <summary>
            InteractionMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateEdit">
            <summary>
            Edit of the DisplayMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateDisplay">
            <summary>
            Display of the DisplayMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupLocked">
            <summary>
            DisplayMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateLocked">
            <summary>
            Edit of the DisplayMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateUnlocked">
            <summary>
            Display of the DisplayMode state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateActive">
            <summary>
            Active state.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateInactive">
            <summary>
            Inactive state.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupActive">
            <summary>
            Active state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateUnwatermarked">
            <summary>
            Non-watermarked state.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateWatermarked">
            <summary>
            Watermarked state.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupWatermark">
            <summary>
            Watermark state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateCalendarButtonUnfocused">
            <summary>
            Unfocused state for Calendar Buttons.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.StateCalendarButtonFocused">
            <summary>
            Focused state for Calendar Buttons.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.VisualStates.GroupCalendarButtonFocus">
            <summary>
            CalendarButtons Focus state group.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.VisualStates.GoToState(System.Windows.Controls.Control,System.Boolean,System.String[])">
            <summary>
            Use VisualStateManager to change the visual state of the control.
            </summary>
            <param name="control">
            Control whose visual state is being changed.
            </param>
            <param name="useTransitions">
            A value indicating whether to use transitions when updating the
            visual state, or to snap directly to the new visual state.
            </param>
            <param name="stateNames">
            Ordered list of state names and fallback states to transition into.
            Only the first state to be found will be used.
            </param>
        </member>
        <member name="M:System.Windows.Controls.VisualStates.GetImplementationRoot(System.Windows.DependencyObject)">
            <summary>
            Gets the implementation root of the Control.
            </summary>
            <param name="dependencyObject">The DependencyObject.</param>
            <remarks>
            Implements Silverlight's corresponding internal property on Control.
            </remarks>
            <returns>Returns the implementation root or null.</returns>
        </member>
        <member name="M:System.Windows.Controls.VisualStates.TryGetVisualStateGroup(System.Windows.DependencyObject,System.String)">
            <summary>
            This method tries to get the named VisualStateGroup for the 
            dependency object. The provided object's ImplementationRoot will be 
            looked up in this call.
            </summary>
            <param name="dependencyObject">The dependency object.</param>
            <param name="groupName">The visual state group's name.</param>
            <returns>Returns null or the VisualStateGroup object.</returns>
        </member>
        <member name="T:System.Windows.Controls.ObjectCollection">
            <summary>
            Implements a collection of objects.
            </summary>
            <remarks>
            ObjectCollection is intended to simplify the task of populating an
            ItemsSource property in XAML.
            </remarks>
            <example>
            <code language="XAML">
            <![CDATA[
            <ItemsControl.ItemsSource>
                <controls:ObjectCollection>
                    <TextBlock Text="Object 1" />
                    <TextBlock Text="Object 2" />
                </controls:ObjectCollection>
            </ItemsControl.ItemsSource>
            ]]>
            </code>
            </example>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.ObjectCollection.#ctor">
            <summary>
            Initializes a new instance of the ObjectCollection class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.ObjectCollection.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the ObjectCollection class.
            </summary>
            <param name="collection">The collection whose elements are copied to the new ObjectCollection.</param>
        </member>
        <member name="T:System.Windows.HierarchicalDataTemplate">
            <summary>
            Represents a DataTemplate that supports HeaderedItemsControl, such as
            TreeViewItem or MenuItem.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="F:System.Windows.HierarchicalDataTemplate._itemTemplate">
            <summary>
            The DataTemplate to apply to the ItemTemplate property on a
            generated HeaderedItemsControl (such as a MenuItem or a
            TreeViewItem), to indicate how to display items from the next level
            in the data hierarchy.
            </summary>
        </member>
        <member name="F:System.Windows.HierarchicalDataTemplate._itemContainerStyle">
            <summary>
            The Style to apply to the ItemContainerStyle property on a generated
            HeaderedItemsControl (such as a MenuItem or a TreeViewItem), to
            indicate how to style items from the next level in the data
            hierarchy.
            </summary>
        </member>
        <member name="M:System.Windows.HierarchicalDataTemplate.#ctor">
            <summary>
            Initializes a new instance of the HierarchicalDataTemplate class.
            </summary>
        </member>
        <member name="P:System.Windows.HierarchicalDataTemplate.ItemsSource">
            <summary>
            Gets or sets the binding for this data template, which indicates
            where to find the collection that represents the next level in the
            data hierarchy. 
            </summary>
            <remarks>
             The default value is null.
            </remarks>
        </member>
        <member name="P:System.Windows.HierarchicalDataTemplate.IsItemTemplateSet">
            <summary>
            Gets a value indicating whether the ItemTemplate property was set on
            the template.
            </summary>
        </member>
        <member name="P:System.Windows.HierarchicalDataTemplate.ItemTemplate">
            <summary>
            Gets or sets the DataTemplate to apply to the ItemTemplate property
            on a generated HeaderedItemsControl (such as a MenuItem or a
            TreeViewItem), to indicate how to display items from the next level
            in the data hierarchy.
            </summary>
        </member>
        <member name="P:System.Windows.HierarchicalDataTemplate.IsItemContainerStyleSet">
            <summary>
            Gets a value indicating whether the ItemContainerStyle property was
            set on the template.
            </summary>
        </member>
        <member name="P:System.Windows.HierarchicalDataTemplate.ItemContainerStyle">
            <summary>
            Gets or sets the Style that is applied to the item container for each child item.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.Dock">
            <summary>
            Specifies the Dock position of a child element that is inside a
            DockPanel.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.Dock.Left">
            <summary>
            A child element that is positioned on the left side of the
            DockPanel.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Dock.Top">
            <summary>
            A child element that is positioned at the top of the DockPanel.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Dock.Right">
            <summary>
            A child element that is positioned on the right side of the
            DockPanel.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Dock.Bottom">
            <summary>
            A child element that is positioned at the bottom of the DockPanel.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.DockPanel">
            <summary>
            Arranges child elements around the edges of the panel. Optionally, 
            the last added child element can occupy the remaining space.
            </summary>
            <remarks>
            <para>
            DockPanel is one of the Panel controls that enables layout. 
            DockPanel is used when you want to arrange a set of objects around the 
            edges of a panel. You specify where a child element is located in 
            the DockPanel with the Dock property. If you set the LastChildFill 
            property to true (the default value) and the last element is allowed 
            to resize, the last element added to the panel will resize to fill the 
            remaining space. If the last element is set to a specific size, 
            the last element will be set to the specified size and positioned in
            the middle of the remaining space.
            </para>
            <para>
            The order in which elements are added to the DockPanel is important. 
            For example, if you add three child elements that have their Dock 
            properties set to Left, they will stack from the left side of the 
            control with the  last element added the furthest right. If elements 
            are added that exceed the space of the DockPanel, the last elements that 
            are added that exceed the space of the panel will be truncated.
            </para>
            </remarks>
            <example>
            The following example shows a DockPanel with child elements positioned 
            at the edges of the panel and the last child filling the remaining 
            space.
            <code language="XAML">
            <![CDATA[
            <Border BorderBrush="Black" BorderThickness="3" >
               <StackPanel x:Name="LayoutRoot" Background="White">
                   <TextBlock Margin="5" Text="Dock Panel" />
                   <Border BorderBrush="Black" BorderThickness="3" >
                       <controls:DockPanel LastChildFill="true" Height="265">
                           <Button  Content="Dock: Left" controls:DockPanel.Dock ="Left" />
                           <Button Content="Dock: Right" controls:DockPanel.Dock ="Right" />
                           <Button  Content="Dock: Top" controls:DockPanel.Dock ="Top" />
                           <Button  Content="Dock: Bottom" controls:DockPanel.Dock ="Bottom" />
                           <Button Content="Last Child" />
                       </controls:DockPanel>
                   </Border>
               </StackPanel>
            </Border>
            ]]>
            </code>
            </example>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.DockPanel._ignorePropertyChange">
            <summary>
            A value indicating whether a dependency property change handler
            should ignore the next change notification.  This is used to reset
            the value of properties without performing any of the actions in
            their change handlers.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.DockPanel.LastChildFillProperty">
            <summary>
            Identifies the LastChildFill dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DockPanel.OnLastChildFillPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            LastChildFillProperty property changed handler.
            </summary>
            <param name="d">DockPanel that changed its LastChildFill.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DockPanel.GetDock(System.Windows.UIElement)">
            <summary>
            Gets the value of the Dock attached property for the specified 
            element.
            </summary>
            <param name="element">
            The element from which the property value is read.
            </param>
            <returns>The Dock property value for the element.</returns>
            <remarks>
            The GetDock and SetDock methods enable you to get and set the 
            value of the Dock property for an element in code.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.DockPanel.SetDock(System.Windows.UIElement,System.Windows.Controls.Dock)">
            <summary>
            Sets the value of the Dock attached property for the specified 
            element to the specified dock value.
            </summary>
            <param name="element">
            The element to which the attached property is assigned.
            </param>
            <param name="dock">
            The dock value to assign to the specified element.
            </param>
            <remarks>
            The GetDock and SetDock methods enable you to get and set the 
            value of the Dock property for an element in code.
            </remarks>
        </member>
        <member name="F:System.Windows.Controls.DockPanel.DockProperty">
            <summary>
            Identifies the Dock dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DockPanel.OnDockPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            DockProperty property changed handler.
            </summary>
            <param name="d">UIElement that changed its Dock.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.DockPanel.#ctor">
            <summary>
            Initializes a new instance of the DockPanel class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.DockPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures the child elements of a DockPanel in preparation for 
            arranging them during the ArrangeOverride pass.
            </summary>
            <param name="constraint">
            The area available to the DockPanel.
            </param>
            <returns>The desired size of the DockPanel.</returns>
            <remarks>
            The MeasureOverride method measures each child element in the 
            DockPanel and returns constraint, or the combined size of all of 
            the elements in the DockPanel, depending on which is larger. 
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.DockPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arranges the child elements of the DockPanel control.
            </summary>
            <param name="arrangeSize">
            The area in the parent element that the DockPanel should use to 
            arrange its child elements.
            </param>
            <returns>
            The actual size of the DockPanel after the child elements are 
            arranged. The actual size should always equal arrangeSize.
            </returns>
            <remarks>
            If child elements are added that exceed arrangeSize, 
            the elements will be truncated. The ArrangeOverride method is 
            called during the second layout pass of the control. 
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.DockPanel.LastChildFill">
            <summary>
            Gets or sets a value indicating whether the last child element 
            added to a DockPanel resizes to fill the remaining space.
            </summary>
            <value>
            True if the last element added resizes to fill the remaining space, 
            false to indicate the last element does not resize. The default is 
            true.
            </value>
            <remarks>
            When the LastChildFill property is set to true and the last 
            element is allowed to resize, the last element added will fill the 
            remaining space in the panel, regardless of the Dock property value. 
            </remarks>
        </member>
        <member name="T:System.Windows.Controls.ExpandDirection">
            <summary>
            Specifies the direction in which an Expander control opens.
            </summary>
            <QualityBand>Stable</QualityBand>
            <example>
            The following example shows how to set the ExpandDirection property of 
            the Expander control in XAML to open in the up direction.
            <code language="XAML">
            <![CDATA[
            <!--An Expander control with the ExpandDirection property set to Up-->
            <controls:Expander Name="MyExpander2" Background="Beige" HorizontalAlignment="Left" Header="Up Expander" ExpandDirection="Up" IsExpanded="True" Width="150">
                <TextBlock TextWrapping="Wrap">
                Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua
                </TextBlock>
            </controls:Expander>
            ]]>
            </code>
            </example>
        </member>
        <member name="F:System.Windows.Controls.ExpandDirection.Down">
            <summary>
            Expander will expand to the down direction.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ExpandDirection.Up">
            <summary>
            Expander will expand to the up direction.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ExpandDirection.Left">
            <summary>
            Expander will expand to the left direction.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.ExpandDirection.Right">
            <summary>
            Expander will expand to the right direction.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.Expander">
            <summary>
            Represents a control that displays a header and has a collapsible 
            content window.
            </summary>
            <remarks>
            <para>
            If the content of the expanded window is too large for the window, 
            you can wrap the content of the Expander in a ScrollViewer control to 
            provide scrollable content. Scrolling capability is not automatically 
            provided by the Expander control. 
            </para>
            <para>
            For an Expander to work correctly, do not specify a Height on the 
            Expander control when the ExpandDirection property is set to Down or 
            Up. Similarly, do not specify a Width on the Expander control when 
            the ExpandDirection property is set to Left or Right. When you set a 
            size on the Expander control in the direction that the expanded content 
            is displayed, the area that is defined by the size parameter is 
            displayed with a border around it. This area displays even when the 
            window is collapsed. To set the size of the expanded window, set size 
            dimensions on the content of the Expander control or the ScrollViewer 
            that encloses the content.
            </para>
            <para>
            When an Expander control is the last element in a DockPanel, the 
            Expander is sized to fill the remaining area of the DockPanel. 
            To prevent this, set the LastChildFill property on the DockPanel to
            false, or make sure that the Expander is not the last element in a 
            DockPanel.
            </para>
            <para>
             The alignment of Expander content can be defined by setting the 
            HorizontalContentAlignment and VerticalContentAlignment properties 
            on the control. These properties are applied to the header and to 
            the contents of the expanded window.
            </para>
            <para>
            Content Model: Expander is a HeaderedContentControl. Its content 
            property is Content and its header property is Header.
            </para>
            </remarks>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="T:System.Windows.Controls.HeaderedContentControl">
            <summary>
            Provides the base implementation for controls that contain a single 
            content element and a header.
            </summary>
            <remarks>
            <para>
            A HeaderedContentControl extends the ContentControl class and adds a 
            Header property for displaying label content at the top of the control. 
            The Header property accepts an object, which means it can contain any 
            kind of content. You can also set a data template to specify how the 
            label content should display by using the HeaderTemplate property.
            </para>
            <para>
            A HeaderedContentControl has a limited default style. You can create a 
            HeaderedContentControl, but its appearance will be very simple. 
            If you want to enhance the appearance of the control, you must create 
            a new ControlTemplate for the control. A HeaderedContentControl is 
            useful for creating custom controls because it provides a model for 
            a content control with a header.
            </para>
            <para>
            Dependency properties for this control might be set by the control�s 
            default style. If a property is set by a default style, the property 
            might change from its default value when the control appears in the 
            application. 
            </para>
            </remarks>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.HeaderedContentControl.HeaderProperty">
            <summary>
            Identifies the Header dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.HeaderedContentControl.OnHeaderPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            HeaderProperty property changed handler.
            </summary>
            <param name="d">HeaderedContentControl whose Header property is changed.</param>
            <param name="e">DependencyPropertyChangedEventArgs, which contains the old and new value.</param>
        </member>
        <member name="F:System.Windows.Controls.HeaderedContentControl.HeaderTemplateProperty">
            <summary>
            Identifies the HeaderTemplate dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.HeaderedContentControl.OnHeaderTemplatePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            HeaderTemplateProperty property changed handler.
            </summary>
            <param name="d">HeaderedContentControl whose HeaderTemplate property is changed.</param>
            <param name="e">DependencyPropertyChangedEventArgs, which contains the old and new value.</param>
        </member>
        <member name="M:System.Windows.Controls.HeaderedContentControl.#ctor">
            <summary>
            Default DependencyObject constructor.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.HeaderedContentControl.OnHeaderChanged(System.Object,System.Object)">
            <summary>
            Called when the value of the Header property changes.
            </summary>
            <param name="oldHeader">The old value of the Header property.</param>
            <param name="newHeader">The new value of the Header property.</param>
        </member>
        <member name="M:System.Windows.Controls.HeaderedContentControl.OnHeaderTemplateChanged(System.Windows.DataTemplate,System.Windows.DataTemplate)">
            <summary>
            Called when the value of the HeaderTemplate property changes.
            </summary>
            <param name="oldHeaderTemplate">The old value of the HeaderTemplate property.</param>
            <param name="newHeaderTemplate">The new value of the HeaderTemplate property.</param>
        </member>
        <member name="P:System.Windows.Controls.HeaderedContentControl.Header">
            <summary>
            Gets or sets the content for the header of the control. 
            </summary>
            <remarks>
            This property is used to add content to the header of the 
            HeaderedContentControl. You can apply a data template to the 
            header by using the HeaderTemplate property. 
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.HeaderedContentControl.HeaderTemplate">
            <summary>
            Gets or sets the template that is used to display the content of 
            the control's header. 
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Expander.ElementExpanderButtonName">
            <summary>
            The name of the ExpanderButton template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Expander._expanderButton">
            <summary>
            The ExpanderButton template part is a templated ToggleButton that's used 
            to expand and collapse the ExpandSite, which hosts the content.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Expander.ExpandDirectionProperty">
            <summary>
            Identifies the ExpandDirection dependency property. 
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Expander.OnExpandDirectionPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ExpandDirectionProperty PropertyChangedCallback call back static function.
            This function validates the new value before calling virtual function OnExpandDirectionChanged.
            </summary>
            <param name="d">Expander object whose ExpandDirection property is changed.</param>
            <param name="e">DependencyPropertyChangedEventArgs which contains the old and new values.</param>
        </member>
        <member name="M:System.Windows.Controls.Expander.IsValidExpandDirection(System.Object)">
            <summary>
            Check whether the passed in value o is a valid ExpandDirection enum value.
            </summary>
            <param name="o">The value to be checked.</param>
            <returns>True if o is a valid ExpandDirection enum value, false o/w.</returns>
        </member>
        <member name="F:System.Windows.Controls.Expander.IsExpandedProperty">
            <summary>
            Identifies the IsExpanded dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Expander.OnIsExpandedPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ExpandedProperty PropertyChangedCallback static function.
            </summary>
            <param name="d">Expander object whose Expanded property is changed.</param>
            <param name="e">DependencyPropertyChangedEventArgs which contains the old and new values.</param>
        </member>
        <member name="M:System.Windows.Controls.Expander.#ctor">
            <summary>
            Initializes a new instance of the Expander class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Expander.OnApplyTemplate">
            <summary>
            Builds the visual tree for the Expander control when a new 
            template is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Expander.OnCreateAutomationPeer">
            <summary>
            Returns a ExpanderAutomationPeer for use by the Silverlight
            automation infrastructure.
            </summary>
            <returns>A ExpanderAutomationPeer object for the Expander.</returns>
        </member>
        <member name="M:System.Windows.Controls.Expander.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Provides handling for the KeyDown event.
            </summary>
            <param name="e">Key event args.</param>
        </member>
        <member name="M:System.Windows.Controls.Expander.OnExpanded">
            <summary>
            Raises the Expanded event when the IsExpanded property changes 
            from false to true.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Expander.OnCollapsed">
            <summary>
            Raises the Collapsed event when the IsExpanded property changes 
            from true to false.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Expander.ToggleExpanded(System.Windows.RoutedEventHandler,System.Windows.RoutedEventArgs)">
            <summary>
            Handle changes to the IsExpanded property.
            </summary>
            <param name="handler">Event handler.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Expander.RaiseEvent(System.Windows.RoutedEventHandler,System.Windows.RoutedEventArgs)">
            <summary>
            Raise a RoutedEvent.
            </summary>
            <param name="handler">Event handler.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Expander.OnExpanderButtonClicked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle ExpanderButton's click event.
            </summary>
            <param name="sender">The ExpanderButton in template.</param>
            <param name="e">Routed event arg.</param>
        </member>
        <member name="M:System.Windows.Controls.Expander.System#Windows#Controls#IUpdateVisualState#UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="M:System.Windows.Controls.Expander.UpdateVisualState(System.Boolean)">
            <summary>
            Update the current visual state of the button.
            </summary>
            <param name="useTransitions">
            True to use transitions when updating the visual state, false to
            snap directly to the new visual state.
            </param>
        </member>
        <member name="P:System.Windows.Controls.Expander.ExpanderButton">
            <summary>
            Gets or sets the ExpanderButton template part.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Expander.ExpandDirection">
            <summary>
            Gets or sets the direction in which the Expander content window opens.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Expander.IsExpanded">
            <summary>
            Gets or sets a value indicating whether the Expander content 
            window is visible.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.Expander.Expanded">
            <summary>
            Occurs when the content window of an Expander control opens to 
            display both its header and content.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.Expander.Collapsed">
            <summary>
            Occurs when the content window of an Expander control closes and 
            only the Header is visible.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Expander.Interaction">
            <summary>
            Gets or sets the helper that provides all of the standard
            interaction functionality.
            </summary>
        </member>
        <member name="T:System.Windows.Automation.Peers.ExpanderAutomationPeer">
            <summary>
            Exposes Expander types to UI Automation.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="M:System.Windows.Automation.Peers.ExpanderAutomationPeer.#ctor(System.Windows.Controls.Expander)">
            <summary>
            Initializes a new instance of the ExpanderAutomationPeer class.
            </summary>
            <param name="owner">
            The Expander that is associated with this ExpanderAutomationPeer.
            </param>
        </member>
        <member name="M:System.Windows.Automation.Peers.ExpanderAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Gets the control type for the Expander that is associated
            with this ExpanderAutomationPeer.  This method is called by
            GetAutomationControlType.
            </summary>
            <returns>Group AutomationControlType.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.ExpanderAutomationPeer.GetClassNameCore">
            <summary>
            Gets the name of the Expander that is associated with this
            ExpanderAutomationPeer.  This method is called by GetClassName.
            </summary>
            <returns>The name Expander.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.ExpanderAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Gets the control pattern for the Expander that is associated
            with this ExpanderAutomationPeer.
            </summary>
            <param name="pattern">The desired PatternInterface.</param>
            <returns>The desired AutomationPeer or null.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.ExpanderAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#Expand">
            <summary>
            Displays the content of the Expander.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.ExpanderAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#Collapse">
            <summary>
            Hides all descendent controls of the Expander.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.ExpanderAutomationPeer.RaiseExpandCollapseAutomationEvent(System.Boolean,System.Boolean)">
            <summary>
            Raise an automation event when a Expander is expanded or collapsed.
            </summary>
            <param name="oldValue">
            A value indicating whether the Expander was expanded.
            </param>
            <param name="newValue">
            A value indicating whether the Expander is expanded.
            </param>
        </member>
        <member name="P:System.Windows.Automation.Peers.ExpanderAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#ExpandCollapseState">
            <summary>
            Gets the state (expanded or collapsed) of the Expander.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="T:System.Windows.Controls.IItemContainerGenerator">
            <summary>
            IItemContainerGenerator provides useful utilities for mapping between
            the items of an ItemsControl and their generated containers.
            </summary>
            <QualityBand>Preview</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.IItemContainerGenerator.ContainerFromIndex(System.Int32)">
            <summary>
            Returns the element corresponding to the item at the given index
            within the ItemCollection.
            </summary>
            <param name="index">The index of the desired item.</param>
            <returns>
            Returns the element corresponding to the item at the given index
            within the ItemCollection or returns null if the item is not
            realized.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.IItemContainerGenerator.ContainerFromItem(System.Object)">
            <summary>
            Returns the container corresponding to the given item.
            </summary>
            <param name="item">The item to find the container for.</param>
            <returns>
            A container that corresponds to the given item.  Returns null if the
            item does not belong to the item collection, or if a container has
            not been generated for it.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.IItemContainerGenerator.IndexFromContainer(System.Windows.DependencyObject)">
            <summary>
            Returns the index to an item that corresponds to the specified,
            generated container. 
            </summary>
            <param name="container">
            The DependencyObject that corresponds to the item to the index to be
            returned.
            </param>
            <returns>
            An Int32 index to an item that corresponds to the specified,
            generated container.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.IItemContainerGenerator.ItemFromContainer(System.Windows.DependencyObject)">
            <summary>
            Returns the item that corresponds to the specified, generated
            container.
            </summary>
            <param name="container">
            The DependencyObject that corresponds to the item to be returned.
            </param>
            <returns>
            The contained item, or the container if it had no associated item.
            </returns>
        </member>
        <member name="T:System.Windows.Controls.HeaderedItemsControl">
            <summary>
            Represents a control that contains a collection of items and a header.
            </summary>
            <remarks>
            Use this class to create a control that contains a heading (or label) 
            and multiple items. The TreeViewItem class is an example of a class that 
            inherits from HeaderedItemsControl.
            <para>
            A HeaderedItemsControl extends the ItemsControl class and adds a Header
             property for displaying label content at the top of the control. 
            The Header property accepts an object, which means it can contain any 
            kind of content. You can also set a data template to specify how the 
            label content should display using the HeaderTemplate property.
            </para>
            <para>
            A HeaderedItemsControl has a limited default style. You can create a 
            HeaderedItemsControl, but its appearance will be very simple. If you want 
            to enhance the appearance of the control, you must create a new 
            ControlTemplate for the control. A HeaderedItemsControl is useful 
            for creating custom controls because it provides a model for an items 
            control with a header.
            </para>
            <para>
            Dependency properties for this control might be set by the control’s 
            default style. If a property is set by a default style, 
            the property might change from its default value when the control 
            appears in the application. 
            </para>
            </remarks>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.HeaderedItemsControl.HeaderProperty">
            <summary>
            Identifies the Header dependency property.
            </summary>
            <remarks>
            Note: WPF defines this property via a call to AddOwner of
            HeaderedContentControl's HeaderProperty.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.HeaderedItemsControl.OnHeaderPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            HeaderProperty property changed handler.
            </summary>
            <param name="d">
            HeaderedItemsControl that changed its Header.
            </param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.HeaderedItemsControl.HeaderTemplateProperty">
            <summary>
            Identifies the HeaderTemplate dependency property.
            </summary>
            <remarks>
            Note: WPF defines this property via a call to AddOwner of
            HeaderedContentControl's HeaderTemplateProperty.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.HeaderedItemsControl.OnHeaderTemplatePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            HeaderTemplateProperty property changed handler.
            </summary>
            <param name="d">
            HeaderedItemsControl that changed its HeaderTemplate.
            </param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.HeaderedItemsControl.ItemContainerStyleProperty">
            <summary>
            Identifies the ItemContainerStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.HeaderedItemsControl.OnItemContainerStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ItemContainerStyleProperty property changed handler.
            </summary>
            <param name="d">
            HeaderedItemsControl that changed its ItemContainerStyle.
            </param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.HeaderedItemsControl.#ctor">
            <summary>
            Initializes a new instance of the HeaderedItemsControl class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.HeaderedItemsControl.OnHeaderChanged(System.Object,System.Object)">
            <summary>
            Called when the value of the Header property changes.
            </summary>
            <param name="oldHeader">
            The old value of the Header property.
            </param>
            <param name="newHeader">
            The new value of the Header property.
            </param>
            <remarks>
            Override this method in a derived class to provide special 
            handling when the value of the Header property changes.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.HeaderedItemsControl.OnHeaderTemplateChanged(System.Windows.DataTemplate,System.Windows.DataTemplate)">
            <summary>
            Called when the value of the HeaderTemplate property changes.
            </summary>
            <param name="oldHeaderTemplate">
            The old value of the HeaderTemplate property.
            </param>
            <param name="newHeaderTemplate">
            The new value of the HeaderTemplate property.
            </param>
            <remarks>
            Override this method in a derived class to provide 
            special handling when the value of the HeaderTemplate 
            property changes.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.HeaderedItemsControl.OnApplyTemplate">
            <summary>
            Builds the visual tree for the HeaderedItemsControl when 
            a new template is applied.
            </summary>
            <remarks>
            This method is invoked whenever application code or an 
            internal process, such as a rebuilding layout pass, 
            calls the ApplyTemplate method.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.HeaderedItemsControl.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            Prepares the specified element to display the specified item.
            </summary>
            <param name="element">
            The container element used to display the specified item.
            </param>
            <param name="item">
            The content to display.
            </param>
            <remarks>
            Preparing the element may involve applying styles, setting bindings, 
            and so on.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.HeaderedItemsControl.ClearContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            Removes any bindings and templates applied to the item container 
            for the specified content.
            </summary>
            <param name="element">
            The container element that is used to display the specified item.
            </param>
            <param name="item">
            The content to display.
            </param>
            <remarks>
            This method removes styles, binding, and other item-specific 
            effects that were applied to the container element to prepare 
            it to contain the specified content item. 
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.HeaderedItemsControl.HeaderIsItem">
            <summary>
            Gets or sets a value indicating whether the Header property has been
            set to the item of an ItemsControl.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.HeaderedItemsControl.Header">
            <summary>
            Gets or sets the item that labels the control. 
            </summary>
        </member>
        <member name="P:System.Windows.Controls.HeaderedItemsControl.HeaderTemplate">
            <summary>
            Gets or sets a data template that is used to display the 
            contents of the control's header.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.HeaderedItemsControl.ItemContainerStyle">
            <summary>
            Gets or sets the Style that is applied to the container element 
            generated for each item.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.HeaderedItemsControl.ItemContainerGenerator">
            <summary>
            Gets the ItemContainerGenerator that is associated with the 
            HeaderedItemsControl.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.Label">
            <summary>
            Represents the text label for a control.
            </summary>
            <remarks>
            A Label control displays static text to the user. It is typically used 
            to identify another control, such as a TextBox. You use the Content 
            property to set the contents of a Label. A Label cannot have the focus,
             does not have a tab stop, and does not provide a Target property.
            Label does not provide a Target property because Silverlight controls
            do not currently respect the concept of access keys.
            </remarks>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="M:System.Windows.Controls.Label.#ctor">
            <summary>
            Initializes a new instance of the Label class.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.TreeView">
            <summary>
            Represents a control that displays hierarchical data in a tree 
            structure that has items that can expand and collapse.
            </summary>
            <remarks>
            The TreeView control is an ItemsControl. You populate a TreeView with 
            content by setting its Items or ItemsSource property.
            </remarks>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.TreeView._allowWrite">
            <summary>
            A value indicating whether a read-only dependency property change
            handler should allow the value to be set.  This is used to ensure
            that read-only properties cannot be changed via SetValue, etc.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TreeView._ignorePropertyChange">
            <summary>
            A value indicating whether a dependency property change handler
            should ignore the next change notification.  This is used to reset
            the value of properties without performing any of the actions in
            their change handlers.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TreeView.SelectedItemProperty">
            <summary>
            Identifies the SelectedItem dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TreeView.OnSelectedItemPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            SelectedItemProperty property changed handler.
            </summary>
            <param name="d">TreeView that changed its SelectedItem.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TreeView.SelectedValueProperty">
            <summary>
            Identifies the SelectedValue dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TreeView.OnSelectedValuePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            SelectedValueProperty property changed handler.
            </summary>
            <param name="d">TreeView that changed its SelectedValue.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TreeView.SelectedValuePathProperty">
            <summary>
            Identifies the SelectedValuePath dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TreeView.OnSelectedValuePathPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            SelectedValuePathProperty property changed handler.
            </summary>
            <param name="d">TreeView that changed its SelectedValuePath.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TreeView.ItemContainerStyleProperty">
            <summary>
            Identifies the ItemContainerStyle dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TreeView.OnItemContainerStylePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ItemContainerStyleProperty property changed handler.
            </summary>
            <param name="d">
            TreeView that changed its ItemContainerStyle.
            </param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TreeView.#ctor">
            <summary>
            Initializes a new instance of the TreeView class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TreeView.OnCreateAutomationPeer">
            <summary>
            Returns a TreeViewAutomationPeer for use by the Silverlight
            automation infrastructure.
            </summary>
            <returns>
            A TreeViewAutomationPeer for the TreeView control.
            </returns>
            <remarks>
            This method creates a new TreeViewAutomationPeer instance if one has
            not been created for the tree view instance; otherwise, it returns 
            the TreeViewAutomationPeer previously created. Classes that 
            participate in the Silverlight automation infrastructure must 
            implement this method to return a class-specific derived class 
            of AutomationPeer that reports information for automation behavior.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.TreeView.OnApplyTemplate">
            <summary>
            Builds the visual tree for the TreeView control when a new control
            template is applied.
            </summary>
            <remarks>
            This method is invoked whenever application code or an internal 
            process, such as a rebuilding layout pass, calls the ApplyTemplate 
            method.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.TreeView.GetContainerForItemOverride">
            <summary>
            Creates a TreeViewItem to display content.
            </summary>
            <returns>
            A new TreeViewItem to use as a container for content.
            </returns>
            <remarks>
            Use this method when you need the TreeView to use a container 
            object other than TreeViewItem objects. You override this method 
            in a derived class and return a custom item container.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.TreeView.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Determines whether the specified item is a TreeViewItem, which is 
            the default container for items in the TreeView control.
            </summary>
            <param name="item">The object to evaluate.</param>
            <returns>
            True if the item is a TreeViewItem; otherwise, false.
            </returns>
            <remarks>
            If you create a custom item container, which you return from the 
            GetContainerForItemOverride method, you should also override this 
            method and return whether item is the custom item container type. 
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.TreeView.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            Prepares the container element to display the specified item.
            </summary>
            <param name="element">
            Container element used to display the specified item.
            </param>
            <param name="item">Specified item to display.</param>
            <remarks>
            The PrepareContainerForItemOverride method applies the correct 
            property settings from the parent TreeView control to the container 
            element.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.TreeView.ClearContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            Removes all templates, styles, and bindings for the object displayed 
            as a TreeViewItem.
            </summary>
            <param name="element">The TreeViewItem element to clear.</param>
            <param name="item">
            The item that is contained in the TreeViewItem.
            </param>
        </member>
        <member name="M:System.Windows.Controls.TreeView.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Makes adjustments to the TreeView control when the value of 
            the Items property changes.
            </summary>
            <param name="e">
            A NotifyCollectionChangedEventArgs that contains data about the 
            change. 
            </param>
            <remarks>
            This method adjusts the contents of the TreeView when its items 
            collection changes. If necessary, this method changes the selected 
            item. 
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.TreeView.CheckForSelectedDescendents(System.Windows.Controls.TreeViewItem)">
            <summary>
            Select any descendents when adding new TreeViewItems to a TreeView.
            </summary>
            <param name="item">The added item.</param>
        </member>
        <member name="M:System.Windows.Controls.TreeView.GetGenerator(System.Windows.Controls.ItemsControl)">
            <summary>
            Get the ItemContainerGenerator for a TreeView or TreeViewItem.
            </summary>
            <param name="control">TreeView or TreeViewItem.</param>
            <returns>
            The ItemContainerGenerator for a TreeView or TreeViewItem.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TreeView.PropagateKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Propagate OnKeyDown messages from the root TreeViewItems to their
            TreeView.
            </summary>
            <param name="e">Event arguments.</param>
            <remarks>
            Because Silverlight's ScrollViewer swallows many useful key events
            (which it can ignore on WPF if you override HandlesScrolling or use
            an internal only variable in Silverlight), the root TreeViewItems
            explicitly propagate KeyDown events to their parent TreeView.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.TreeView.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Provides handling for the KeyDown event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TreeView.HandleScrollKeys(System.Windows.Input.Key)">
            <summary>
            Handle keys related to scrolling.
            </summary>
            <param name="key">The key to handle.</param>
            <returns>A value indicating whether the key was handled.</returns>
        </member>
        <member name="M:System.Windows.Controls.TreeView.HandleScrollByPage(System.Boolean)">
            <summary>
            Handle scrolling a page up or down.
            </summary>
            <param name="up">
            A value indicating whether the page should be scrolled up.
            </param>
            <returns>
            A value indicating whether the scroll was handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TreeView.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Provides handling for the MouseLeftButtonDown event.
            </summary>
            <param name="e">
            A MouseButtonEventArgs that contains the event data.
            </param>
            <remarks>
            The OnMouseLeftButtonDown method is called before any event handler 
            for the MouseLeftButtonDown is called. This method allows derived 
            classes to handle the MouseLeftButtonDown event without attaching a 
            delegate. This is the preferred technique for handling the event 
            in a derived class.
            This implementation marks the MouseLeftButtonDown event as handled 
            by setting the Handled property of the event data to true when the 
            left mouse button is pressed while the mouse pointer is over a 
            TreeViewItem associated with the TreeView control.
            Notes to Inheritors: If you override OnMouseLeftButtonDown, you can 
            prevent registered delegates from receiving events by setting 
            Handled to true. 
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.TreeView.HandleMouseButtonDown">
            <summary>
            Provides handling for mouse button events.
            </summary>
            <returns>A value indicating whether the event was handled.</returns>
        </member>
        <member name="M:System.Windows.Controls.TreeView.OnSelectedItemChanged(System.Windows.RoutedPropertyChangedEventArgs{System.Object})">
            <summary>
            Raises the SelectedItemChanged event when the SelectedItem 
            property value changes.
            </summary>
            <param name="e">
            Provides the item that was previously selected and the item that is
            currently selected for the SelectedItemChanged event.
            </param>
            <remarks>
            Raising an event invokes the event handler through a delegate. 
            The OnSelectedItemChanged method also allows derived classes to 
            handle the event without attaching a delegate. This is the preferred 
            technique for handling the event in a derived class.
            Notes to Inheritors: When overriding OnSelectedItemChanged in a 
            derived class, make sure to call the base class’s 
            OnSelectedItemChanged method so that registered delegates 
            receive the event. 
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.TreeView.ChangeSelection(System.Object,System.Windows.Controls.TreeViewItem,System.Boolean)">
            <summary>
            Change whether a TreeViewItem is selected.
            </summary>
            <param name="itemOrContainer">
            Item whose selection is changing.
            </param>
            <param name="container">
            Container of the item whose selection is changing.
            </param>
            <param name="selected">
            A value indicating whether the TreeViewItem is selected.
            </param>
        </member>
        <member name="M:System.Windows.Controls.TreeView.UpdateSelectedValue(System.Object)">
            <summary>
            Update the selected value of the of the TreeView based on the value
            of the currently selected TreeViewItem and the SelectedValuePath.
            </summary>
            <param name="item">
            Value of the currently selected TreeViewItem.
            </param>
        </member>
        <member name="M:System.Windows.Controls.TreeView.SelectFirstItem">
            <summary>
            Select the first item of the TreeView.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TreeView.FocusFirstItem">
            <summary>
            Focus the first item in the TreeView.
            </summary>
            <returns>A value indicating whether the item was focused.</returns>
        </member>
        <member name="M:System.Windows.Controls.TreeView.FocusLastItem">
            <summary>
            Focus the last item in the TreeView.
            </summary>
            <returns>A value indicating whether the item was focused.</returns>
        </member>
        <member name="P:System.Windows.Controls.TreeView.SelectedItem">
            <summary>
            Gets the selected item in a TreeView.
            </summary>
            <value>
            The currently selected item or a null reference (Nothing in 
            Visual Basic) if no item is selected. 
            The default value is a null reference (Nothing in Visual Basic).
            </value>
        </member>
        <member name="P:System.Windows.Controls.TreeView.SelectedValue">
            <summary>
            Gets the value of the SelectedItem property that is specified by 
            the SelectedValuePath property.
            </summary>
            <value>
            The value of the SelectedItem property that is specified by the 
            SelectedValuePath property, or a null reference (Nothing in Visual 
            Basic)  if no item is selected. The default value is anull reference 
            (Nothing in Visual Basic).
            </value>
            <remarks>
            SelectedValuePath is used to specify which property value on the 
            selected item is returned for SelectedValue. For example, if you 
            have a TreeView bound to a collection of objects of type Employee, 
            which has two properties named EmployeeName and EnployeeNumber. 
            You can set SelectedValuePath to "EmployeeNumber" to have 
            SelectedValue return the value of EmployeeNumber.
            SelectedValue is a read-only property. To change the value of a 
            selected item in a TreeView, use the SelectedItem property to 
            access the TreeViewItem.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.TreeView.SelectedValuePath">
            <summary>
            Gets or sets the property path that is used to get the SelectedValue 
            property of the SelectedItem property in a TreeView.
            </summary>
            <value>
            The property path that is used to get the SelectedValue property of 
            the SelectedItem property in a TreeView. The default value is Empty.
            </value>
            <remarks>
            SelectedValuePath is used to specify which property value on the 
            selected item is returned for SelectedValue. For example, if you 
            have TreeView bound to a collection of objects of type Employee, 
            which has two properties named EmployeeName and EnployeeNumber. 
            You can set SelectedValuePath to "EmployeeNumber" to have 
            SelectedValue return the value of EmployeeNumber.
            SelectedValue is a read-only property. To change the value of a 
            selected item in a TreeView, use the SelectedItem property to 
            access the TreeViewItem.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.TreeView.ItemContainerStyle">
            <summary>
            Gets or sets the Style that is applied to the container element 
            generated for each item.
            </summary>
            <remarks>
            This style is applied to the TreeViewItem or other container 
            used in a derived class.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.TreeView.SelectedContainer">
            <summary>
            Gets the currently selected TreeViewItem container.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TreeView.IsSelectedContainerHookedUp">
            <summary>
            Gets a value indicating whether the currently selected TreeViewItem
            container is properly hooked up to the TreeView.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TreeView.IsSelectionChangeActive">
            <summary>
            Gets or sets a value indicating whether the selected item is
            currently being changed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TreeView.ItemContainerGenerator">
            <summary>
            Gets the ItemContainerGenerator that is associated with this 
            control.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TreeView.IsControlKeyDown">
            <summary>
            Gets a value indicating whether the Control key is currently
            pressed.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TreeView.IsShiftKeyDown">
            <summary>
            Gets a value indicating whether the Shift key is currently pressed.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.TreeView.SelectedItemChanged">
            <summary>
            Occurs when the value of the SelectedItem property changes.
            </summary>
        </member>
        <member name="T:System.Windows.Automation.Peers.TreeViewAutomationPeer">
            <summary>
            Exposes TreeView types to UI Automation.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="M:System.Windows.Automation.Peers.TreeViewAutomationPeer.#ctor(System.Windows.Controls.TreeView)">
            <summary>
            Initializes a new instance of the TreeViewAutomationPeer class.
            </summary>
            <param name="owner">
            The TreeView that is associated with this TreeViewAutomationPeer.
            </param>
        </member>
        <member name="M:System.Windows.Automation.Peers.TreeViewAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Gets the control type for the TreeView that is associated
            with this TreeViewAutomationPeer.  This method is called by
            GetAutomationControlType.
            </summary>
            <returns>Tree AutomationControlType.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.TreeViewAutomationPeer.GetClassNameCore">
            <summary>
            Gets the name of the TreeView that is associated with this
            TreeViewAutomationPeer.  This method is called by GetClassName.
            </summary>
            <returns>The name TreeView.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.TreeViewAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Gets the control pattern for the TreeView that is associated with
            this TreeViewAutomationPeer.
            </summary>
            <param name="patternInterface">The desired PatternInterface.</param>
            <returns>The desired AutomationPeer or null.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.TreeViewAutomationPeer.GetChildrenCore">
            <summary>
            Gets the collection of child elements of the TreeView that is
            associated with this TreeViewAutomationPeer.  This method is called
            by GetChildren.
            </summary>
            <returns>
            A collection of TreeViewItemAutomationPeer elements, or null if the
            TreeView that is associated with this TreeViewAutomationPeer is
            empty.
            </returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.TreeViewAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#GetSelection">
            <summary>
            Retrieves a UI Automation provider for each child element that is
            selected.
            </summary>
            <returns>A collection of UI Automation providers.</returns>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.TreeViewAutomationPeer.OwnerTreeView">
            <summary>
            Gets the TreeView that owns this TreeViewAutomationPeer.
            </summary>
        </member>
        <member name="P:System.Windows.Automation.Peers.TreeViewAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#CanSelectMultiple">
            <summary>
            Gets a value indicating whether the UI Automation provider allows
            more than one child element to be selected concurrently.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.TreeViewAutomationPeer.System#Windows#Automation#Provider#ISelectionProvider#IsSelectionRequired">
            <summary>
            Gets a value indicating whether the UI Automation provider requires
            at least one child element to be selected.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="T:System.Windows.Controls.TreeViewItem">
            <summary>
            Provides a selectable item for the TreeView control.
            </summary>
            <remarks>
            TreeViewItem is a HeaderedItemsControl. You can populate the control 
            by using the Items or ItemsSource property. In addition, you can set 
            a header for its contents by using the Header property.
            </remarks>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.TreeViewItem.ExpanderButtonName">
            <summary>
            The name of the ExpanderButton template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TreeViewItem.HeaderName">
            <summary>
            The name of the Header template part.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TreeViewItem._expanderButton">
            <summary>
            The ExpanderButton template part is used to expand and collapse the
            TreeViewItem.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TreeViewItem._headerElement">
            <summary>
            The Header template part is used to distinguish the bound Header
            content of the TreeViewItem.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TreeViewItem._expansionStateGroup">
            <summary>
            The ExpansionStates visual state group.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TreeViewItem._allowWrite">
            <summary>
            A value indicating whether a read-only dependency property change
            handler should allow the value to be set.  This is used to ensure
            that read-only properties cannot be changed via SetValue, etc.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.TreeViewItem.HasItemsProperty">
            <summary>
            Identifies the HasItems dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItem.OnHasItemsPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            HasItemsProperty property changed handler.
            </summary>
            <param name="d">TreeViewItem that changed its HasItems.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TreeViewItem.IsExpandedProperty">
            <summary>
            Identifies the IsExpanded dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItem.OnIsExpandedPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsExpandedProperty property changed handler.
            </summary>
            <param name="d">TreeViewItem that changed its IsExpanded.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TreeViewItem.IsSelectedProperty">
            <summary>
            Identifies the IsSelected dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItem.OnIsSelectedPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsSelectedProperty property changed handler.
            </summary>
            <param name="d">TreeViewItem that changed its IsSelected.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TreeViewItem.IsSelectionActiveProperty">
            <summary>
            Identifies the IsSelectionActive dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItem.OnIsSelectionActivePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            IsSelectionActiveProperty property changed handler.
            </summary>
            <param name="d">TreeViewItem that changed its IsSelectionActive.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="F:System.Windows.Controls.TreeViewItem._parentItemsControl">
            <summary>
            A reference to the parent ItemsControl of a TreeViewItem.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItem.#ctor">
            <summary>
            Initializes a new instance of the TreeViewItem class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItem.OnCreateAutomationPeer">
            <summary>
            Returns a TreeViewItemAutomationPeer for use by the Silverlight
            automation infrastructure.
            </summary>
            <returns>
            A TreeViewItemAutomationPeer object for the TreeViewItem.
            </returns>
            <remarks>
            This method creates a new TreeViewItemAutomationPeer instance if 
            one has not been created for the TreeViewItem instance; 
            otherwise, it returns the TreeViewItemAutomationPeer previously 
            created.
            Classes that participate in the Silverlight automation 
            infrastructure must implement this method to return a class-specific 
            derived class of AutomationPeer that reports information for 
            automation behavior.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItem.OnApplyTemplate">
            <summary>
            Builds the visual tree for the TreeViewItem control when a new
            control template is applied.
            </summary>
            <remarks>
            This method is invoked whenever application code or an internal 
            process, such as a rebuilding layout pass, calls the 
            ApplyTemplate method.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItem.OnExpansionStateGroupStateChanged(System.Object,System.Windows.VisualStateChangedEventArgs)">
            <summary>
            Provides handling for the ExpansionStates CurrentChanged event.
            </summary>
            <param name="sender">The ExpansionState VisualStateGroup.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItem.System#Windows#Controls#IUpdateVisualState#UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItem.UpdateVisualState(System.Boolean)">
            <summary>
            Update the visual state of the control.
            </summary>
            <param name="useTransitions">
            A value indicating whether to automatically generate transitions to
            the new state, or instantly transition to the new state.
            </param>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItem.GetContainerForItemOverride">
            <summary>
            Creates a TreeViewItem to display content.
            </summary>
            <returns>A new TreeViewItem.</returns>
            <remarks>
            Use this method when you need the TreeViewItem to use a container 
            object other than TreeViewItem objects. You override this method 
            in a derived class and return a custom item container.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItem.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Determines whether an object is a TreeViewItem.
            </summary>
            <param name="item">The object to evaluate.</param>
            <returns>true if item is a TreeViewItem; otherwise, false.</returns>
            <remarks>
            If you create a custom item container, which you return from the 
            GetContainerForItemOverride method, you should also override this 
            method and return whether item is the custom item container type. 
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItem.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            Prepares the specified container element to display the specified 
            item.
            </summary>
            <param name="element">
            Container element used to display the specified item.
            </param>
            <param name="item">The item to display.</param>
            <remarks>
            The PrepareContainerForItemOverride method applies the correct 
            property settings from the parent TreeView control to the container element.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItem.ClearContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            Removes all templates, styles, and bindings for the object 
            displayed as a TreeViewItem.
            </summary>
            <param name="element">The TreeViewItem element to clear.</param>
            <param name="item">
            The item that is contained in the TreeViewItem.
            </param>
            <remarks>
            The ClearContainerForItemOverride method undoes any property 
            settings established by the PrepareContainerForItemOverride method.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItem.OnItemsChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Makes adjustments to the TreeViewItem when the value of the Items 
            property changes. 
            </summary>
            <param name="e">
            A NotifyCollectionChangedEventArgs that contains data about the 
            change.
            </param>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItem.RaiseEvent(System.Windows.RoutedEventHandler,System.Windows.RoutedEventArgs)">
            <summary>
            Raise a RoutedEvent.
            </summary>
            <param name="handler">Event handler.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItem.OnExpanded(System.Windows.RoutedEventArgs)">
            <summary>
            This method updates the visual state of the TreeViewItem when the 
            value of IsExpanded changes and then raises the Expanded event.
            Raising an event invokes the event handler through a delegate. 
            The OnExpanded method also allows derived classes to handle the 
            event without attaching a delegate. This is the preferred technique 
            for handling the event in a derived class.
            Notes to Inheritors: When overriding OnExpanded in a derived class, 
            make sure to call the base class’s OnExpanded method so that 
            registered delegates receive the event. 
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItem.OnCollapsed(System.Windows.RoutedEventArgs)">
            <summary>
            Raises a Collapsed event when the IsExpanded property changes from
            true to false.
            </summary>
            <param name="e">
            A RoutedEventArgs that contains the event data.
            </param>
            <remarks>
            This method updates the visual state of the TreeViewItem when the 
            value of the IsExpanded changes, and then raises the Collapsed 
            event.
            Raising an event invokes the event handler through a delegate. 
            The OnCollapsed method also allows derived classes to handle the 
            event without attaching a delegate. This is the preferred technique 
            for handling the event in a derived class.
            Notes to Inheritors: When overriding OnCollapsed in a derived class, 
            make sure to call the base class’s OnCollapsed method so that 
            registered delegates receive the event. 
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItem.ToggleExpanded(System.Windows.RoutedEventHandler,System.Windows.RoutedEventArgs)">
            <summary>
            Handle changes to the IsExpanded property.
            </summary>
            <param name="handler">Event handler.</param>
            <param name="args">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItem.OnSelected(System.Windows.RoutedEventArgs)">
            <summary>
            Raises the Selected event when the IsSelected property changes from
            false to true.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItem.OnUnselected(System.Windows.RoutedEventArgs)">
            <summary>
            Raises the Unselected event when the IsSelected property changes
            from true to false.
            </summary>
            <param name="e">
            A RoutedEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItem.OnGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the GotFocus event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItem.OnLostFocus(System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the LostFocus event.
            </summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItem.OnExpanderGotFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handle the ExpanderButton's GotFocus event.
            </summary>
            <param name="sender">The ExpanderButton.</param>
            <param name="e">Event Arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItem.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseEnter event.
            </summary>
            <param name="e">A MouseEventArgs that contains the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItem.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Provides handling for the MouseLeave event.
            </summary>
            <param name="e">
            A MouseEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItem.OnHeaderMouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Provides handling for the Header's MouseLeftButtonDown event.
            </summary>
            <param name="sender">The Header template part.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItem.OnExpanderClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Provides handling for the ExpanderButton's Click event.
            </summary>
            <param name="sender">The ExpanderButton.</param>
            <param name="e">Event Arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItem.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Provides handling for the MouseLeftButtonDown event.
            </summary>
            <param name="e">
            A MouseButtonEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItem.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Provides handling for the MouseLeftButtonUp event.
            </summary>
            <param name="e">
            A MouseButtonEventArgs that contains the event data.
            </param>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItem.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Provides handling for the KeyDown event.
            </summary>
            <param name="e">A KeyEventArgs that contains the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItem.HandleDownKey">
            <summary>
            Try moving the focus down from the selected item.
            </summary>
            <returns>
            A value indicating whether the focus was successfully moved.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItem.OnKeyUp(System.Windows.Input.KeyEventArgs)">
            <summary>
            Provides handling for the KeyUp event.
            </summary>
            <param name="e">A RoutedEventArgs that contains the event data.</param>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItem.HandleUpKey">
            <summary>
            Try moving the focus up from the selected item.
            </summary>
            <returns>
            A value indicating whether the focus was successfully moved.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItem.HandleScrollByPage(System.Boolean,System.Windows.Controls.ScrollViewer,System.Double,System.Double,System.Double,System.Double@)">
            <summary>
            Handle scrolling a page up or down.
            </summary>
            <param name="up">
            A value indicating whether the page should be scrolled up.
            </param>
            <param name="scrollHost">The ScrollViewer being scrolled.</param>
            <param name="viewportHeight">The height of the viewport.</param>
            <param name="top">The top of item to start from.</param>
            <param name="bottom">The bottom of the item to start from.</param>
            <param name="currentDelta">The height of this item.</param>
            <returns>
            A value indicating whether the scroll was handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItem.CalculateDelta(System.Boolean,System.Windows.FrameworkElement,System.Windows.Controls.ScrollViewer,System.Double,System.Double,System.Double@)">
            <summary>
            Calculate the distance between this TreeViewItem and the item being
            paged from.
            </summary>
            <param name="up">
            A value indicating whether the page should be scrolled up.
            </param>
            <param name="element">The element being paged from.</param>
            <param name="scrollHost">The ScrollViewer being scrolled.</param>
            <param name="top">The top of item to start from.</param>
            <param name="bottom">The bottom of the item to start from.</param>
            <param name="closeEdge">
            The distance between the top/bottom of one item to the other.
            </param>
            <returns>
            A value indicating whether the scroll was handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItem.Select(System.Boolean)">
            <summary>
            Change the selected status of the TreeViewItem.
            </summary>
            <param name="selected">
            A value indicating whether the TreeViewItem is selected.
            </param>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItem.UpdateContainsSelection(System.Boolean)">
            <summary>
            Update the ancestors of this item when it changes selection.
            </summary>
            <param name="selected">
            A value indicating whether the item is selected.
            </param>
            <remarks>
            Unselection updates need to occur before selection updates because
            the old and new selected items may share a partial path.
            </remarks>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItem.AllowKeyHandleEvent">
            <summary>
            Determine whether the TreeViewItem should be allowed to handle a key
            event.
            </summary>
            <returns>
            A value indicating whether the key event should be handled.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItem.FocusDown">
            <summary>
            Navigate the focus to the next TreeViewItem below this item.
            </summary>
            <returns>
            A value indicating whether the focus was navigated.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItem.FocusInto">
            <summary>
            Navigate the focus to the very last TreeViewItem descendent of the
            this item.
            </summary>
            <returns>
            A value indicating whether the focus was navigated.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItem.FindNextFocusableItem(System.Boolean)">
            <summary>
            Find the next focusable TreeViewItem below this item.
            </summary>
            <param name="recurse">
            A value indicating whether the item should recurse into its child
            items when searching for the next focusable TreeViewItem.
            </param>
            <returns>The next focusable TreeViewItem below this item.</returns>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItem.FindLastFocusableItem">
            <summary>
            Find the last focusable TreeViewItem contained by this item.
            </summary>
            <returns>
            The last focusable TreeViewItem contained by this item.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.TreeViewItem.FindPreviousFocusableItem">
            <summary>
            Find the previous focusable TreeViewItem above this item.
            </summary>
            <returns>
            The previous focusable TreeViewItem above this item.
            </returns>
        </member>
        <member name="P:System.Windows.Controls.TreeViewItem.ExpanderButton">
            <summary>
            Gets or sets the ExpanderButton template part is used to expand and
            collapse the TreeViewItem.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TreeViewItem.HeaderElement">
            <summary>
            Gets the Header template part that is used to distinguish the bound
            Header content of the TreeViewItem.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TreeViewItem.ExpansionStateGroup">
            <summary>
            Gets or sets the ExpansionStates visual state group.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TreeViewItem.IgnorePropertyChange">
            <summary>
            Gets or sets a value indicating whether a dependency property change
            handler should ignore the next change notification.  This is used to
            reset the value of properties without performing any of the actions
            in their change handlers.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TreeViewItem.HasItems">
            <summary>
            Gets a value indicating whether this TreeViewItem contains items.
            </summary>
            <value>
            True if this TreeViewItem contains items; otherwise, false. 
            The default is false.
            </value>
        </member>
        <member name="P:System.Windows.Controls.TreeViewItem.IsExpanded">
            <summary>
            Gets or sets a value indicating whether the Items contained by 
            this TreeViewItem are expanded or collapsed.
            </summary>
            <value>
            True to indicate the contents of the Items collection are expanded; 
            false to indicate the items are collapsed. The default is false.
            </value>
        </member>
        <member name="P:System.Windows.Controls.TreeViewItem.IsSelected">
            <summary>
            Gets or sets a value indicating whether this TreeViewItem is 
            selected.
            </summary>
            <remarks>
            true if this TreeViewItem is selected; otherwise, false. The default 
            is false.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.TreeViewItem.IsSelectionActive">
            <summary>
            Gets a value indicating whether the TreeViewItem has focus.
            </summary>
            <value>
            True if this TreeViewItem has focus; otherwise, false. The default is false.
            </value>
        </member>
        <member name="P:System.Windows.Controls.TreeViewItem.Interaction">
            <summary>
            Gets the helper that provides all of the standard
            interaction functionality.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TreeViewItem.ContainsSelection">
            <summary>
            Gets or sets a value indicating whether the TreeView's currently
            selected item is a descendent of this TreeViewItem.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TreeViewItem.CancelGotFocusBubble">
            <summary>
            Gets or sets a value indicating whether the TreeViewItem should
            ignore the next GotFocus event it receives because it has already
            been handled by one of its children.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TreeViewItem.RequiresContainsSelectionUpdate">
            <summary>
            Gets or sets a value indicating whether checking ContainsSelection
            should actually perform the update notifications because the item
            was selected before it was in the visual tree.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TreeViewItem.ParentItemsControl">
            <summary>
            Gets or sets a reference to the parent ItemsControl of a
            TreeViewItem.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TreeViewItem.ParentTreeViewItem">
            <summary>
            Gets a reference to the parent TreeViewItem of this TreeViewItem.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TreeViewItem.ParentTreeView">
            <summary>
            Gets a reference to the parent TreeView of the TreeViewItem.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TreeViewItem.IsRoot">
            <summary>
            Gets a value indicating whether this TreeViewItem is a root of the
            TreeView.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.TreeViewItem.CanExpandOnInput">
            <summary>
            Gets a value indicating whether the TreeViewItem can expand when it
            receives appropriate user input.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.TreeViewItem.Collapsed">
            <summary>
            Occurs when the IsExpanded property changes from true to false.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.TreeViewItem.Expanded">
            <summary>
            Occurs when the IsExpanded property changes from false to true.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.TreeViewItem.Selected">
            <summary>
            Occurs when the IsSelected property of a TreeViewItem changes from
            false to true.
            </summary>
        </member>
        <member name="E:System.Windows.Controls.TreeViewItem.Unselected">
            <summary>
            Occurs when the IsSelected property of a TreeViewItem changes from
            true to false.
            </summary>
        </member>
        <member name="T:System.Windows.Automation.Peers.TreeViewItemAutomationPeer">
            <summary>
            Exposes TreeViewItem types to UI Automation.
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="M:System.Windows.Automation.Peers.TreeViewItemAutomationPeer.#ctor(System.Windows.Controls.TreeViewItem)">
            <summary>
            Initializes a new instance of the TreeViewItemAutomationPeer class.
            </summary>
            <param name="owner">
            The TreeViewItem that is associated with this
            TreeViewItemAutomationPeer.
            </param>
        </member>
        <member name="M:System.Windows.Automation.Peers.TreeViewItemAutomationPeer.GetAutomationControlTypeCore">
            <summary>
            Gets the control type for the TreeViewItem that is associated
            with this TreeViewItemAutomationPeer.  This method is called by
            GetAutomationControlType.
            </summary>
            <returns>Tree AutomationControlType.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.TreeViewItemAutomationPeer.GetClassNameCore">
            <summary>
            Gets the name of the TreeViewItem that is associated with this
            TreeViewItemAutomationPeer.  This method is called by GetClassName.
            </summary>
            <returns>The name TreeView.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.TreeViewItemAutomationPeer.GetPattern(System.Windows.Automation.Peers.PatternInterface)">
            <summary>
            Gets the control pattern for the TreeViewItem that is associated
            with this TreeViewItemAutomationPeer.
            </summary>
            <param name="patternInterface">The desired PatternInterface.</param>
            <returns>The desired AutomationPeer or null.</returns>
        </member>
        <member name="M:System.Windows.Automation.Peers.TreeViewItemAutomationPeer.RaiseAutomationIsSelectedChanged(System.Boolean)">
            <summary>
            Raise the IsSelected property changed event.
            </summary>
            <param name="isSelected">
            A value indicating whether the TreeViewItem is selected.
            </param>
        </member>
        <member name="M:System.Windows.Automation.Peers.TreeViewItemAutomationPeer.RaiseExpandCollapseAutomationEvent(System.Boolean,System.Boolean)">
            <summary>
            Raise an automation event when a TreeViewItem is expanded or
            collapsed.
            </summary>
            <param name="oldValue">
            A value indicating whether the TreeViewItem was expanded.
            </param>
            <param name="newValue">
            A value indicating whether the TreeViewItem is expanded.
            </param>
        </member>
        <member name="M:System.Windows.Automation.Peers.TreeViewItemAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#Expand">
            <summary>
            Displays the child items of the TreeViewItem.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.TreeViewItemAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#Collapse">
            <summary>
            Hides all descendent controls of the TreeViewItem.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.TreeViewItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#AddToSelection">
            <summary>
            Adds the TreeViewItem to the collection of selected items.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.TreeViewItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#Select">
            <summary>
            Clears selection from currently selected items and then proceeds to
            select the current TreeViewItem.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.TreeViewItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#RemoveFromSelection">
            <summary>
            Removes the current TreeViewItem from the collection of selected
            items.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:System.Windows.Automation.Peers.TreeViewItemAutomationPeer.System#Windows#Automation#Provider#IScrollItemProvider#ScrollIntoView">
            <summary>
            Scrolls the content area of a TreeView in order to display the
            TreeViewItem within the visible region (viewport) of the TreeView.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.TreeViewItemAutomationPeer.OwnerTreeViewItem">
            <summary>
            Gets the TreeViewItem that owns this TreeViewItemAutomationPeer.
            </summary>
        </member>
        <member name="P:System.Windows.Automation.Peers.TreeViewItemAutomationPeer.System#Windows#Automation#Provider#IExpandCollapseProvider#ExpandCollapseState">
            <summary>
            Gets the state (expanded or collapsed) of the TreeViewItem.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.TreeViewItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#IsSelected">
            <summary>
            Gets a value indicating whether the TreeViewItem is selected.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="P:System.Windows.Automation.Peers.TreeViewItemAutomationPeer.System#Windows#Automation#Provider#ISelectionItemProvider#SelectionContainer">
            <summary>
            Gets the UI Automation provider that implements ISelectionProvider
            and acts as the container for the calling object.
            </summary>
            <remarks>
            This API supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code.
            </remarks>
        </member>
        <member name="T:System.Windows.Controls.StretchDirection">
            <summary>
            Describes how scaling applies to content and restricts scaling to named
            axis types. 
            </summary>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.StretchDirection.UpOnly">
            <summary>
            The content scales upward only when it is smaller than the parent.
            If the content is larger, no scaling downward is performed.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.StretchDirection.DownOnly">
            <summary>
            The content scales downward only when it is larger than the parent.
            If the content is smaller, no scaling upward is performed.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.StretchDirection.Both">
            <summary>
            The content stretches to fit the parent according to the Stretch
            mode.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.Viewbox">
            <summary>
            Defines a content decorator that can stretch and scale a single child 
            to fill the available space. 
            </summary>
            <remarks>
            Viewbox should inherit from Decorator (which inherits from 
            FrameworkElement), but the closest working base in Silverlight is the 
            ContentControl class.  This provides a number of extra APIs not present 
            in WPF that should be avoided (including the Template property which 
            should not be changed from its default value).  Viewbox has been sealed 
            to prevent the creation of derived classes that depend on these features 
            not available on its WPF counterpart.
            </remarks>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.Viewbox.ChildElementName">
            <summary>
            Name of  child element in Viewbox's default template.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Viewbox.DefaultTemplateMarkup">
            <summary>
            XAML markup used to define the write-once Viewbox template.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.Viewbox.StretchProperty">
            <summary>
            Identifies the Stretch dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Viewbox.OnStretchPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            StretchProperty property changed handler.
            </summary>
            <param name="d">Viewbox that changed its Stretch.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Viewbox.IsValidStretchValue(System.Object)">
            <summary>
            Check whether the passed in object value is a valid Stretch enum value.
            </summary>
            <param name="o">The object typed value to be checked.</param>
            <returns>True if o is a valid Stretch enum value, false o/w.</returns>
        </member>
        <member name="F:System.Windows.Controls.Viewbox.StretchDirectionProperty">
            <summary>
            Identifies the StretchDirection dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Viewbox.OnStretchDirectionPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            StretchDirectionProperty property changed handler.
            </summary>
            <param name="d">Viewbox that changed its StretchDirection.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.Viewbox.IsValidStretchDirectionValue(System.Object)">
            <summary>
            Check whether the passed in object value is a valid StretchDirection enum value.
            </summary>
            <param name="o">The object typed value to be checked.</param>
            <returns>True if o is a valid StretchDirection enum value, false o/w.</returns>
        </member>
        <member name="M:System.Windows.Controls.Viewbox.#ctor">
            <summary>
            Initializes a new instance of the Viewbox class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Viewbox.OnApplyTemplate">
            <summary>
            Builds the visual tree for the ViewBox control when a new template 
            is applied.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.Viewbox.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures the child element of a Viewbox to prepare for arranging
            it during the ArrangeOverride pass.
            </summary>
            <remarks>
            Viewbox measures it's child at an infinite constraint; it allows the child to be however large it so desires.
            The child's returned size will be used as it's natural size for scaling to Viewbox's size during Arrange.
            </remarks>
            <param name="availableSize">
            An upper limit Size that should not be exceeded.
            </param>
            <returns>The target Size of the element.</returns>
        </member>
        <member name="M:System.Windows.Controls.Viewbox.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arranges the content of a Viewbox element.
            Viewbox always sets the child to its desired size.  It then computes and applies a transformation
            from that size to the space available: Viewbox's own input size less child margin.
            </summary>
            <param name="finalSize">
            The Size this element uses to arrange its child content.
            </param>
            <returns>
            The Size that represents the arranged size of this Viewbox element
            and its child.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.Viewbox.ComputeScaleFactor(System.Windows.Size,System.Windows.Size)">
            <summary>
            Compute the scale factor of the Child content.
            </summary>
            <param name="availableSize">
            Available size to fill with content.
            </param>
            <param name="contentSize">Desired size of the content.</param>
            <returns>Width and Height scale factors.</returns>
        </member>
        <member name="P:System.Windows.Controls.Viewbox.DefaultTemplate">
            <summary>
            Gets or sets the default ControlTemplate of the Viewbox.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Viewbox.ChildElement">
            <summary>
            Gets or sets the element of the Viewbox that will render the child.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Viewbox.Scale">
            <summary>
            Gets or sets the transformation on the ChildElement used to scale the
            Child content.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Viewbox.Child">
            <summary>
            Gets or sets the single child element of a Viewbox element.
            </summary>
            <remarks>
            A Viewbox can have only one Child. If you add an additional Child, 
            an ArgumentException will be thrown at run time.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.Viewbox.Stretch">
            <summary>
            Gets or sets the Stretch mode, which determines how content fits 
            into the available space.
            </summary>
            <remarks>
            A Stretch mode, which determines how content fits in the available 
            space. The default is Uniform.
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.Viewbox.StretchDirection">
            <summary>
            Gets or sets the StretchDirection, which determines how scaling is 
            applied to the contents of a Viewbox.
            </summary>
            <remarks>
            Use this property to prevent the contents of a Viewbox from being 
            smaller or larger than its original size.
            </remarks>
        </member>
        <member name="T:System.Windows.Controls.OrientedSize">
            <summary>
            The OrientedSize structure is used to abstract the growth direction from
            the layout algorithms of WrapPanel.  When the growth direction is
            oriented horizontally (ex: the next element is arranged on the side of
            the previous element), then the Width grows directly with the placement
            of elements and Height grows indirectly with the size of the largest
            element in the row.  When the orientation is reversed, so is the
            directional growth with respect to Width and Height.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.OrientedSize._orientation">
            <summary>
            The orientation of the structure.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.OrientedSize._direct">
            <summary>
            The size dimension that grows directly with layout placement.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.OrientedSize._indirect">
            <summary>
            The size dimension that grows indirectly with the maximum value of
            the layout row or column.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.OrientedSize.#ctor(System.Windows.Controls.Orientation)">
            <summary>
            Initializes a new OrientedSize structure.
            </summary>
            <param name="orientation">Orientation of the structure.</param>
        </member>
        <member name="M:System.Windows.Controls.OrientedSize.#ctor(System.Windows.Controls.Orientation,System.Double,System.Double)">
            <summary>
            Initializes a new OrientedSize structure.
            </summary>
            <param name="orientation">Orientation of the structure.</param>
            <param name="width">Un-oriented width of the structure.</param>
            <param name="height">Un-oriented height of the structure.</param>
        </member>
        <member name="P:System.Windows.Controls.OrientedSize.Orientation">
            <summary>
            Gets the orientation of the structure.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.OrientedSize.Direct">
            <summary>
            Gets or sets the size dimension that grows directly with layout
            placement.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.OrientedSize.Indirect">
            <summary>
            Gets or sets the size dimension that grows indirectly with the
            maximum value of the layout row or column.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.OrientedSize.Width">
            <summary>
            Gets or sets the width of the size.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.OrientedSize.Height">
            <summary>
            Gets or sets the height of the size.
            </summary>
        </member>
        <member name="T:System.Windows.Controls.WrapPanel">
            <summary>
            Positions child elements sequentially from left to right or top to 
            bottom. When elements extend beyond the panel edge, elements are 
            positioned in the next row or column.
            </summary>
            <remarks>
            WrapPanel is one of the Panel controls that enable layout. 
            WrapPanel is useful when you want to arrange elements in a vertical or 
            horizontal list and have elements automatically wrap to the next row 
            or column when the height or width limit of the panel is reached. 
            The default value for the Orientation property is Horizontal, which 
            means elements are added from left to right, in rows. If Orientation 
            is set to Vertical, elements are added from top to bottom in columns. 
            </remarks>
            <example>
            <code language="XAML">
            The following example shows a WrapPanel that contains several button 
            controls. 
            <![CDATA[
             <controls:WrapPanel Orientation="Vertical" x:Name="buttonWrapPanel">
               <Button Content="Button 1"/>
               <Button Content="Button 2"/>
               <Button Content="Button 3"/>
               <Button Content="Button 4"/>
               <Button Content="Button 5"/>
               <Button Content="Button 6"/>
               <Button Content="Button 7"/>
               <Button Content="Button 8"/>
               <Button Content="Button 9"/>
               <Button Content="Button 10"/>
               <Button Content="Button 11"/>
               <Button Content="Button 12"/>
               <Button Content="Button 13"/>
               <Button Content="Button 14"/>
            </controls:WrapPanel >
                /// ]]>
            </code>
            </example>
            <QualityBand>Stable</QualityBand>
        </member>
        <member name="F:System.Windows.Controls.WrapPanel._ignorePropertyChange">
            <summary>
            A value indicating whether a dependency property change handler
            should ignore the next change notification.  This is used to reset
            the value of properties without performing any of the actions in
            their change handlers.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.WrapPanel.ItemHeightProperty">
            <summary>
            Identifies the ItemHeight dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.WrapPanel.ItemWidthProperty">
            <summary>
            Identifies the ItemWidth dependency property.
            </summary>
        </member>
        <member name="F:System.Windows.Controls.WrapPanel.OrientationProperty">
            <summary>
            Identifies the Orientation dependency property.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.WrapPanel.OnOrientationPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            OrientationProperty property changed handler.
            </summary>
            <param name="d">WrapPanel that changed its Orientation.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.WrapPanel.#ctor">
            <summary>
            Initializes a new instance of the WrapPanel class.
            </summary>
        </member>
        <member name="M:System.Windows.Controls.WrapPanel.OnItemHeightOrWidthPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Property changed handler for ItemHeight and ItemWidth.
            </summary>
            <param name="d">
            WrapPanel that changed its ItemHeight or ItemWidth.
            </param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:System.Windows.Controls.WrapPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures the child elements of a WrapPanel in anticipation of 
            arranging them during the ArrangeOverride pass.
            </summary>
            <param name="constraint">
            The size available to child elements of the wrap panel.
            </param>
            <returns>
            The size required by the WrapPanel and its child elements.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.WrapPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arranges and sizes the WrapPanel control and its child elements.
            </summary>
            <param name="finalSize">
            The area within the parent that the WrapPanel should use to 
            arrange itself and its children.
            </param>
            <returns>
            The actual size used by the WrapPanel.
            </returns>
        </member>
        <member name="M:System.Windows.Controls.WrapPanel.ArrangeLine(System.Int32,System.Int32,System.Nullable{System.Double},System.Double,System.Double)">
            <summary>
            Arrange a sequence of elements in a single line.
            </summary>
            <param name="lineStart">
            Index of the first element in the sequence to arrange.
            </param>
            <param name="lineEnd">
            Index of the last element in the sequence to arrange.
            </param>
            <param name="directDelta">
            Optional fixed growth in the primary direction.
            </param>
            <param name="indirectOffset">
            Offset of the line in the indirect direction.
            </param>
            <param name="indirectGrowth">
            Shared indirect growth of the elements on this line.
            </param>
        </member>
        <member name="P:System.Windows.Controls.WrapPanel.ItemHeight">
            <summary>
            Gets or sets the height of the layout area for each item that is 
            contained in a WrapPanel.
            </summary>
            <remarks>
            This property specifies the height of the layout area allocated to 
            each child item contained by the WrapPanel and takes precedence over 
            the height set explicitly on a child element. If the height of the 
            child element exceeds the ItemHeight value, the child will be 
            clipped at the ItemHeight value. 
            If this ItemHeight property is not set (or if it is set to Auto in
             XAML or to NaN in code), the height of the layout area in the wrap 
            panel is equal to the height of the tallest child element. 
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.WrapPanel.ItemWidth">
            <summary>
            Gets or sets the width of the layout area for each item that is 
            contained in a WrapPanel.
            </summary>
            <remarks>
            This property specifies the width of the layout area allocated to 
            each child item contained by the WrapPanel and takes precedence 
            over the width set explicitly on a child element. If the width 
            of the child element exceeds the ItemWidth value, the child will 
            be clipped at the ItemWidth value. 
            If this ItemWidth property is not set (or if it is set to Auto in 
            XAML or to NaN in code), the width of the layout area in the wrap 
            panel is equal to the width of the widest child element. 
            </remarks>
        </member>
        <member name="P:System.Windows.Controls.WrapPanel.Orientation">
            <summary>
            Gets or sets the direction in which child elements are arranged.
            </summary>
            <remarks>
            The default value is Horizontal.
            </remarks>
        </member>
        <member name="T:System.Windows.Controls.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Automation_OperationCannotBePerformed">
            <summary>
              Looks up a localized string similar to Cannot perform operation..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.DateTimeTypeConverter_FormatException">
            <summary>
              Looks up a localized string similar to DateTime value is in the wrong format..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.DockPanel_OnDockPropertyChanged_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid Dock value &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Expander_OnExpandDirectionPropertyChanged_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid ExpandDirection value &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.ParameterCollection_EnsureCanChangeCollection_IsReadOnly">
            <summary>
              Looks up a localized string similar to ConstructorParameters cannot be changed because ObjectDataProvider is using a user-assigned ObjectInstance..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.ParameterCollection_EnsureCanChangeCollection_IsReadOnly1">
            <summary>
              Looks up a localized string similar to ConstructorParameters cannot be changed because ObjectDataProvider is using a user-assigned ObjectInstance..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.ResolveElementNameEventArgs_ctor_ElementNameEmpty">
            <summary>
              Looks up a localized string similar to The elementName should not be empty..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.ResolveElementNameEventArgs_ctor_ElementNameEmpty1">
            <summary>
              Looks up a localized string similar to The elementName should not be empty..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.RoutedPropertyChangingEventArgs_CancelSet_InvalidOperation">
            <summary>
              Looks up a localized string similar to The RoutedPropertyChangingEvent cannot be canceled!.
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.TreeView_OnSelectedItemPropertyChanged_InvalidWrite">
            <summary>
              Looks up a localized string similar to Cannot set read-only property SelectedItem..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.TreeView_OnSelectedValuePropertyChanged_InvalidWrite">
            <summary>
              Looks up a localized string similar to Cannot set read-only property SelectedValue..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.TreeViewItem_OnHasItemsPropertyChanged_InvalidWrite">
            <summary>
              Looks up a localized string similar to Cannot set read-only property HasItems..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.TreeViewItem_OnIsSelectionActivePropertyChanged_InvalidWrite">
            <summary>
              Looks up a localized string similar to Cannot set read-only property IsSelectionActive..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.TypeConverters_Convert_CannotConvert">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is unable to convert &apos;{1}&apos; to &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.TypeConverters_Convert_CannotConvert1">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is unable to convert &apos;{1}&apos; to &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.TypeConverters_ConvertFrom_CannotConvertFromType">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; cannot convert from &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.TypeConverters_ConvertFrom_CannotConvertFromType1">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; cannot convert from &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Viewbox_OnApplyTemplate_OnlyOnce">
            <summary>
              Looks up a localized string similar to The template can only be applied one time..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Viewbox_OnStretchDirectionPropertyChanged_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid StretchDirection value &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.Viewbox_OnStretchPropertyChanged_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid Stretch value &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.WrapPanel_OnItemHeightOrWidthPropertyChanged_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid length value &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.Windows.Controls.Properties.Resources.WrapPanel_OnOrientationPropertyChanged_InvalidValue">
            <summary>
              Looks up a localized string similar to Invalid Orientation value &apos;{0}&apos;..
            </summary>
        </member>
    </members>
</doc>
