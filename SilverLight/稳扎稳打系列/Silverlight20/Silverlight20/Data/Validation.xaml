<!--引用验证类所在的命名空间-->
<UserControl x:Class="Silverlight20.Data.Validation"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:custom="clr-namespace:Silverlight20.Data">
    
    <!--
    BindingValidationError - 出现验证错误或解决上次验证错误则触发此事件
    -->
    <StackPanel HorizontalAlignment="Left" BindingValidationError="StackPanel_BindingValidationError" >
        
        <StackPanel.Resources>
        
            <!--在资源中声明验证类-->
            <custom:MyValidation x:Name="myValidation"/>
            
        </StackPanel.Resources>
        
        <TextBox x:Name="textBox" Width="200" Margin="5">
            <TextBox.Text>
            
                <!--
                Binding - 将绑定目标对象的属性与数据源联接起来
                    Source - 绑定的数据源
                    Mode - 绑定的数据流的方向 [System.Windows.Data.BindingMode枚举]
                        BindingMode.OneTime - 一次绑定。创建绑定时一次性地更新绑定目标对象的属性
                        BindingMode.OneWay - 单向绑定（默认值）。数据源的改变会自动通知到绑定目标对象的属性
                        BindingMode.TwoWay - 双向绑定。数据源或绑定目标对象的属性的值发生改变时会互相通知。显然，做数据验证的话一定要是双向绑定
                    Path - 需要绑定的属性名称
                    NotifyOnValidationError - 产生验证错误时是否触发 BindingValidationError 事件。默认值为 false
                    ValidatesOnExceptions - 产生验证错误时绑定引擎是否要报告错误。默认值为 false
                -->
                <Binding 
                    Source="{StaticResource myValidation}"  
                    Mode="TwoWay" 
                    Path="Count"
                    NotifyOnValidationError="True" 
                    ValidatesOnExceptions="True"
                />
                    
            </TextBox.Text>
        </TextBox>
        
        <TextBox x:Name="textBox2" Width="200"  Margin="5" />
           
    </StackPanel>
    
</UserControl>
